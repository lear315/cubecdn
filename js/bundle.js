(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
    }
}
exports.default = GameConfig;
GameConfig.width = 750;
GameConfig.height = 1334;
GameConfig.scaleMode = "showall";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "common/Game.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
GameConfig.init();

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const SceneManager_1 = require("./core/SceneManager");
const LoadingScene_1 = require("./script/scene/LoadingScene");
const GameConfigData_1 = require("./script/common/GameConfigData");
const ResLoader_1 = require("./core/util/ResLoader");
const ProjectConfig_1 = require("./script/common/ProjectConfig");
const GGJGameScene_1 = require("./script/scene/GGJGameScene");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        let height;
        Laya.Browser.onMobile = window.isConchApp ? true : window.navigator.userAgent.indexOf("Mobile") > -1;
        if (Laya.Browser.onMobile) {
            height = Laya.Browser.clientHeight / Laya.Browser.clientWidth * GameConfig_1.default.width;
        }
        else {
            height = GameConfig_1.default.height;
        }
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, height);
        else
            Laya.init(GameConfig_1.default.width, height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = Laya.Stage.ALIGN_CENTER;
        Laya.stage.alignH = Laya.Stage.ALIGN_MIDDLE;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        // 全局报错提示
        // Laya.alertGlobalError = true;
        // 设置ui后缀
        fgui.UIConfig.packageFileExtension = "bin";
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onFileConfLoaded));
    }
    onFileConfLoaded() {
        ResLoader_1.default.load(["config.json"], this, this.onConfigLoaded);
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        // return;
        ProjectConfig_1.ProjectConfig.Ins.init();
        if (ProjectConfig_1.ProjectConfig.Ins.cdnUrl) {
            Laya.URL.basePath = ProjectConfig_1.ProjectConfig.Ins.cdnUrl;
        }
        GameConfigData_1.default.Ins.init();
        // SceneManager.setLoadScene(LoadingGuiScene);
        // SceneManager.open(GameScene);
        SceneManager_1.default.setLoadScene(LoadingScene_1.default);
        SceneManager_1.default.open(GGJGameScene_1.default);
    }
}
//激活启动类
new Main();

},{"./GameConfig":1,"./core/SceneManager":14,"./core/util/ResLoader":24,"./script/common/GameConfigData":38,"./script/common/ProjectConfig":39,"./script/scene/GGJGameScene":59,"./script/scene/LoadingScene":61}],3:[function(require,module,exports){
"use strict";
/**
 * 组件
 */
Object.defineProperty(exports, "__esModule", { value: true });
const LogicScheduler_1 = require("./LogicScheduler");
const EventManager_1 = require("./EventManager");
class BaseComponent {
    constructor() {
        // 启用update()
        this.updateComp = false;
        // 启用lateUpdate()
        this.lateUpdateComp = false;
    }
    onLoad(...params) {
        this.onEnable();
    }
    onStart() {
    }
    onDestory() {
        this.onDisable();
        EventManager_1.default.offAll(this);
    }
    onEnable() {
        LogicScheduler_1.default.Ins.enableComp(this);
    }
    onDisable() {
        LogicScheduler_1.default.Ins.disableComp(this);
    }
    update(detal) {
    }
    lateUpdate(detal) {
    }
}
exports.default = BaseComponent;

},{"./EventManager":10,"./LogicScheduler":13}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("./util/Logger");
const IdGenerater_1 = require("./util/IdGenerater");
const ActionManager_1 = require("./action/ActionManager");
const LogicScheduler_1 = require("./LogicScheduler");
const EntityTypeDefine_1 = require("./util/EntityTypeDefine");
class BaseEntity {
    constructor() {
        this._entityType = EntityTypeDefine_1.EntityType.BaseEntity;
        this._components = [];
        this._eventMap = new Map();
        this._uuid = IdGenerater_1.getNewUuid();
    }
    dependAssets() {
        return null;
    }
    ;
    get enable() {
        return this._enable;
    }
    initModel(model) {
        this._model = model;
        this._model.init(this);
    }
    on(type, context, callback, priority = 0) {
        if (!type || !callback || !context) {
            return;
        }
        if (!this._eventMap.has(type)) {
            this._eventMap.set(type, []);
        }
        let subEventList = this._eventMap.get(type);
        if (this.isExistListener(context, callback, subEventList)) {
            return;
        }
        let event = {
            type,
            context,
            priority,
            callback
        };
        if (priority > 0) {
            let isPush = true;
            for (let i = subEventList.length - 1; i >= 0; i--) {
                if (subEventList[i].priority > priority) {
                    subEventList.splice(i + 1, 0, event);
                    isPush = false;
                    break;
                }
            }
            if (isPush) {
                subEventList.splice(0, 0, event);
            }
        }
        else {
            subEventList.push(event);
        }
    }
    emit(type, ...params) {
        if (!type) {
            return;
        }
        let subEventList = this._eventMap.get(type);
        if (!subEventList) {
            return;
        }
        for (let i = subEventList.length - 1; i >= 0; i--) {
            let event = subEventList[i];
            let callback = event.callback;
            let context = event.context;
            callback.apply(context, params);
        }
    }
    isExistListener(context, callback, subEventList) {
        for (let i = 0; i < subEventList.length; i++) {
            if ((subEventList[i].context === context) && (subEventList[i].callback === callback)) {
                return true;
            }
        }
        return false;
    }
    off(type, context, callback) {
        if (!type || !callback) {
            return;
        }
        let subEventList = this._eventMap.get(type);
        if (!subEventList) {
            return;
        }
        for (let i = subEventList.length - 1; i >= 0; i--) {
            if ((subEventList[i].context === context) && (subEventList[i].callback === callback)) {
                subEventList.splice(i, 1);
                break;
            }
        }
        if (subEventList.length == 0) {
            delete this._eventMap[type];
        }
    }
    offAll(context) {
        this._eventMap.forEach((subEventList, type) => {
            for (let i = subEventList.length - 1; i >= 0; i--) {
                if ((subEventList[i].context === context)) {
                    subEventList.splice(i, 1);
                }
            }
            if (subEventList.length == 0) {
                delete this._eventMap[type];
            }
        });
    }
    get uuid() {
        return this._uuid;
    }
    get model() {
        return this._model;
    }
    addComponent(component, ...params) {
        let comp = this.getComponent(component);
        if (comp != null) {
            Logger_1.warn(`addComponent ${component.prototype.constructor.name} already exist`);
            return null;
        }
        else {
            let comp = new component();
            comp.entity = this;
            comp.model = this.model;
            comp.onLoad.apply(comp, ...params);
            this._components.push(comp);
            return comp;
        }
    }
    getComponent(component) {
        for (let i = 0; i < this._components.length; ++i) {
            let comp = this._components[i];
            if (comp.constructor === component) {
                return comp;
            }
        }
        return null;
    }
    removeAllComponent() {
        for (let i = 0; i < this._components.length; ++i) {
            let comp = this._components[i];
            comp.onDestory();
        }
        this._components.length = 0;
    }
    removeComponent(component) {
        for (let i = 0; i < this._components.length; ++i) {
            let comp = this._components[i];
            if (comp.constructor === component) {
                comp.onDestory();
                this._components.splice(i, 1);
                ;
                return;
            }
        }
    }
    runAction(action) {
        ActionManager_1.default.addAction(action, this);
    }
    removeAllActions() {
        ActionManager_1.default.removeAllActionsFromTarget(this);
    }
    get entityType() {
        return this._entityType;
    }
    /**
     * 在实体禁用时被调用
     */
    onDisable() {
        this._enable = false;
    }
    /**
     * 在实体启用时被调用
     */
    onEnable() {
        this._enable = true;
    }
    /**
     * 用于的初始化，在实体的生命周期中只执行一次, 在对象被第一次onEnable之后执行
     */
    onStart() {
    }
    /**
     * 用于的初始化，在实体的生命周期中只执行一次
     */
    onAwake() {
        this.onEnable();
        this.onStart();
    }
    onDestory() {
        this._eventMap.clear();
        this._eventMap = null;
        this.removeAllComponent();
        LogicScheduler_1.default.clearAll(this);
        ActionManager_1.default.removeAllActionsFromTarget(this);
    }
}
exports.default = BaseEntity;

},{"./LogicScheduler":13,"./action/ActionManager":18,"./util/EntityTypeDefine":20,"./util/IdGenerater":22,"./util/Logger":23}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseScene_1 = require("./BaseScene");
const ResLoader_1 = require("./util/ResLoader");
class BaseLoadScene extends BaseScene_1.default {
    dependAssets() {
        let assets = [];
        return assets;
    }
    onLoad() {
    }
    loadUrls(urls, context = null, complete = null) {
        this._context = context;
        this._complete = complete;
        if (!urls || urls.length === 0) {
            this.onComplete();
            return;
        }
        ResLoader_1.default.load(urls, this, this.onComplete, this.onProgress);
    }
    onComplete() {
        if (this._context && this._complete) {
            this._complete.apply(this._context);
        }
    }
    show() {
        this._scene.visible = true;
    }
    hide() {
        this._scene.visible = false;
    }
    onDestory() {
        super.onDestory();
    }
}
exports.default = BaseLoadScene;

},{"./BaseScene":7,"./util/ResLoader":24}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseModel {
    constructor() {
        this._localPosition = new Laya.Vector3(0, 0, 0);
        this._localRotationEuler = new Laya.Vector3(0, 0, 0);
        this._localScale = new Laya.Vector3(0, 0, 0);
    }
    init(owner) {
        this._owner = owner;
        this._guid = owner.uuid;
    }
    get guid() {
        return this._guid;
    }
    get localPosition() {
        return this._localPosition;
    }
    get localRotationEuler() {
        return this._localRotationEuler;
    }
    get localScale() {
        return this._localScale;
    }
    setPosition(x, y, z) {
        if (x != undefined && y != undefined && y != undefined) {
            this._localPosition.setValue(x, y, z);
        }
    }
    setRotation(x, y, z) {
        if (x != undefined && y != undefined && y != undefined) {
            this._localRotationEuler.setValue(x, y, z);
        }
    }
    setScale(x, y, z) {
        if (x != undefined && y != undefined && y != undefined) {
            this._localScale.setValue(x, y, z);
        }
    }
    onDestory() {
        this._localPosition = null;
        this._localRotationEuler = null;
        this._localScale = null;
    }
}
exports.default = BaseModel;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseScene {
    constructor() {
    }
    onLoad() {
    }
    addChild(node) {
        this._scene.addChild(node);
    }
    get scene() {
        return this._scene;
    }
    onDestory() {
        this._scene.removeSelf();
        this._scene.destroy(true);
        Laya.Render.context.clear();
    }
}
exports.default = BaseScene;

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseComponent_1 = require("./BaseComponent");
class BaseView extends BaseComponent_1.default {
    constructor() {
        super();
    }
    onLoad(...params) {
        super.onLoad();
    }
    onDestory() {
        super.onDestory();
    }
    show() {
    }
    hide() {
    }
    removeSelf() {
    }
}
exports.default = BaseView;

},{"./BaseComponent":3}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BindEntityScript extends Laya.Script {
    constructor() {
        super();
    }
    setEntity(v) {
        this._entity = v;
    }
    get entity() {
        return this._entity;
    }
    onDestroy() {
        super.onDestroy();
        this._entity = null;
    }
}
exports.default = BindEntityScript;

},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EventManager {
    constructor() {
        this._eventMap = new Map();
    }
    static get Ins() {
        if (!EventManager._eventManager) {
            EventManager._eventManager = new EventManager();
        }
        return EventManager._eventManager;
    }
    clear() {
        this._eventMap.clear();
        this._eventMap = null;
    }
    static on(type, context, callback, priority = 0) {
        if (!type || !callback || !context) {
            return;
        }
        if (!EventManager.Ins._eventMap.has(type)) {
            EventManager.Ins._eventMap[type] = [];
        }
        let subEventList = EventManager.Ins._eventMap[type];
        if (EventManager.Ins.isExistListener(context, callback, subEventList)) {
            return;
        }
        let event = {
            type,
            context,
            priority,
            callback
        };
        if (priority > 0) {
            let isPush = true;
            for (let i = subEventList.length - 1; i >= 0; i--) {
                if (subEventList[i].priority > priority) {
                    subEventList.splice(i + 1, 0, event);
                    isPush = false;
                    break;
                }
            }
            if (isPush) {
                subEventList.splice(0, 0, event);
            }
        }
        else {
            subEventList.push(event);
        }
    }
    isExistListener(context, callback, subEventList) {
        for (let i = 0; i < subEventList.length; i++) {
            if ((subEventList[i].context === context) && (subEventList[i].callback === callback)) {
                return true;
            }
        }
        return false;
    }
    static emit(type, ...params) {
        if (!type) {
            return;
        }
        let subEventList = EventManager.Ins._eventMap[type];
        if (!subEventList) {
            return;
        }
        for (let i = subEventList.length - 1; i >= 0; i--) {
            let event = subEventList[i];
            let callback = event.callback;
            let context = event.context;
            callback.apply(context, params);
        }
    }
    static off(type, context, callback) {
        if (!type || !callback) {
            return;
        }
        let subEventList = EventManager.Ins._eventMap[type];
        if (!subEventList) {
            return;
        }
        for (let i = subEventList.length - 1; i >= 0; i--) {
            if ((subEventList[i].context === context) && (subEventList[i].callback === callback)) {
                subEventList.splice(i, 1);
                break;
            }
        }
        if (subEventList.length == 0) {
            delete EventManager.Ins._eventMap[type];
        }
    }
    static offAll(context) {
        EventManager.Ins._eventMap.forEach((subEventList, type) => {
            for (let i = subEventList.length - 1; i >= 0; i--) {
                if ((subEventList[i].context === context)) {
                    subEventList.splice(i, 1);
                }
            }
            if (subEventList.length == 0) {
                delete EventManager.Ins._eventMap[type];
            }
        });
    }
}
exports.default = EventManager;

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 使用fairyGui的界面
 */
const BaseView_1 = require("./BaseView");
class FuiBaseView extends BaseView_1.default {
    constructor() {
        super();
    }
    onLoad(...params) {
        super.onLoad();
    }
    onDestory() {
        super.onDestory();
        this.view.dispose();
        this.view = null;
    }
    show() {
        if (this.view) {
            this.view.visible = true;
        }
    }
    hide() {
        if (this.view) {
            this.view.visible = false;
        }
    }
    removeSelf() {
        if (this.view) {
            this.view.removeFromParent();
            this.onDestory();
        }
    }
}
exports.default = FuiBaseView;

},{"./BaseView":8}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 使用LayaIde的Gui的界面
 */
const BaseView_1 = require("./BaseView");
class GuiBaseView extends BaseView_1.default {
    constructor() {
        super();
    }
    onLoad(...params) {
        super.onLoad();
    }
    onDestory() {
        super.onDestory();
        this.view = null;
    }
    show() {
        if (this.view) {
            this.view.visible = true;
        }
    }
    hide() {
        if (this.view) {
            this.view.visible = false;
        }
    }
    removeSelf() {
        if (this.view) {
            this.view.removeSelf();
            this.onDestory();
        }
    }
}
exports.default = GuiBaseView;

},{"./BaseView":8}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameDefine_1 = require("./util/GameDefine");
class LogicScheduler {
    constructor() {
        this._isPause = false;
    }
    static get Ins() {
        if (!LogicScheduler._logicScheduler) {
            LogicScheduler._logicScheduler = new LogicScheduler();
            LogicScheduler._logicScheduler.init();
        }
        return LogicScheduler._logicScheduler;
    }
    init() {
        Laya.stage.frameRate = Laya.Stage.FRAME_FAST;
        this._isPause = false;
        Laya.timer.frameLoop(1, this, this.onUpdate);
        this._compUpdataList = [];
        this._compLateUpdataList = [];
        this._callbackTimerList = [];
        this._frameCount = 0;
    }
    onUpdate() {
        if (this._isPause) {
            return;
        }
        let detal = Laya.timer.delta;
        let expect = 0;
        // 补帧
        while (detal > expect + LogicScheduler.frameRateFix) {
            this._frameCount++;
            this.onUpdateStep(LogicScheduler.frameRate);
            expect += (LogicScheduler.frameRate);
        }
    }
    onUpdateStep(detal) {
        for (let i = this._compUpdataList.length - 1; i >= 0; i--) {
            if (this._compUpdataList[i] && this._compUpdataList[i].entity.enable) {
                this._compUpdataList[i].update(detal);
            }
        }
        for (let i = this._compLateUpdataList.length - 1; i >= 0; i--) {
            if (this._compUpdataList[i] && this._compUpdataList[i].entity.enable) {
                this._compLateUpdataList[i].lateUpdate(detal);
            }
        }
        for (let i = this._callbackTimerList.length - 1; i >= 0; i--) {
            let callbackTimer = this._callbackTimerList[i];
            if (callbackTimer == null) {
                continue;
            }
            if (this._frameCount >= callbackTimer.executeFrame) {
                if (callbackTimer.executeCount === Number.MAX_VALUE) {
                    callbackTimer.executeFrame = callbackTimer.delayFrame + this._frameCount;
                }
                else {
                    callbackTimer.executeCount -= 1;
                    if (callbackTimer.executeCount <= 0) {
                        this._callbackTimerList.splice(i, 1);
                    }
                    else {
                        callbackTimer.executeFrame = callbackTimer.delayFrame + this._frameCount;
                    }
                }
                callbackTimer.callback.apply(callbackTimer.context, callbackTimer.args);
            }
        }
    }
    pause() {
        this._isPause = true;
    }
    resume() {
        this._isPause = false;
    }
    get isPause() {
        return this._isPause;
    }
    enableComp(component) {
        if (component.updateComp) {
            if (this._compUpdataList.indexOf(component) === -1) {
                this._compUpdataList.push(component);
            }
        }
        if (component.lateUpdateComp) {
            if (this._compLateUpdataList.indexOf(component) === -1) {
                this._compLateUpdataList.push(component);
            }
        }
    }
    disableComp(component) {
        if (this._compUpdataList.indexOf(component) !== -1) {
            this._compUpdataList.splice(this._compUpdataList.indexOf(component));
        }
        if (this._compLateUpdataList.indexOf(component) !== -1) {
            this._compLateUpdataList.splice(this._compLateUpdataList.indexOf(component));
        }
    }
    addToCallbackTimerList(context, callback, args, executeCount, delayFrame) {
        let executeFrame = delayFrame + this._frameCount;
        let callbackTimer = {
            context,
            callback,
            executeCount,
            args,
            delayFrame,
            executeFrame
        };
        this._callbackTimerList.push(callbackTimer);
    }
    clear(context, callback) {
        if (!context || !callback) {
            return;
        }
        for (let i = this._callbackTimerList.length - 1; i >= 0; i--) {
            if ((this._callbackTimerList[i].context === context) && (this._callbackTimerList[i].callback === callback)) {
                this._callbackTimerList.splice(i, 1);
            }
        }
    }
    clearAll(context) {
        if (!context) {
            return;
        }
        for (let i = this._callbackTimerList.length - 1; i >= 0; i--) {
            if (this._callbackTimerList[i].context === context) {
                this._callbackTimerList.splice(i, 1);
            }
        }
    }
    static loop(time, context, callback, args = null) {
        if (!callback || !context) {
            return;
        }
        LogicScheduler.Ins.clear(context, callback);
        let delayFrame = Math.ceil(time / GameDefine_1.FrameRate);
        LogicScheduler.Ins.addToCallbackTimerList(context, callback, args, Number.MAX_VALUE, delayFrame);
    }
    static loopFrame(frame, context, callback, args = null) {
        if (!callback || !context) {
            return;
        }
        LogicScheduler.Ins.clear(context, callback);
        LogicScheduler.Ins.addToCallbackTimerList(context, callback, args, Number.MAX_VALUE, frame);
    }
    static once(time, context, callback, args = null) {
        if (!callback || !context) {
            return;
        }
        LogicScheduler.Ins.clear(context, callback);
        let delayFrame = Math.ceil(time / GameDefine_1.FrameRate);
        LogicScheduler.Ins.addToCallbackTimerList(context, callback, args, 1, delayFrame);
    }
    static onceFrame(frame, context, callback, args = null) {
        if (!callback || !context) {
            return;
        }
        LogicScheduler.Ins.clear(context, callback);
        LogicScheduler.Ins.addToCallbackTimerList(context, callback, args, 1, frame);
    }
    static clear(context, callback) {
        LogicScheduler.Ins.clear(context, callback);
    }
    static clearAll(context) {
        LogicScheduler.Ins.clearAll(context);
    }
}
exports.default = LogicScheduler;
LogicScheduler.frameRate = 16.7;
LogicScheduler.frameRateFix = 12;

},{"./util/GameDefine":21}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResLoader_1 = require("./util/ResLoader");
const ViewManager_1 = require("./ViewManager");
class SceneManager {
    static get Ins() {
        if (!SceneManager._sceneManager) {
            SceneManager._sceneManager = new SceneManager();
        }
        return SceneManager._sceneManager;
    }
    static get curSence() {
        return SceneManager.Ins._curSence;
    }
    static open(scene, assets = [], loading = true, clear = true) {
        let sceneManager = SceneManager.Ins;
        if (clear) {
            ViewManager_1.default.removeAllView();
            sceneManager._curSence && sceneManager._curSence.onDestory();
        }
        sceneManager._curSence = new scene();
        if (loading) {
            sceneManager.loadScene(sceneManager._curSence.dependAssets().concat(assets));
        }
        else {
            sceneManager._curSence.onLoad();
        }
    }
    static setLoadScene(scene) {
        let sceneManager = SceneManager.Ins;
        sceneManager._loadName = scene;
        if (sceneManager._loadScene) {
            sceneManager._loadScene.onDestory();
        }
        sceneManager._loadScene = null;
    }
    loadScene(urls) {
        if (this._loadScene) {
            this._loadScene.show();
            this._loadScene.loadUrls(urls, this, this.loadComplete);
        }
        else {
            this._loadScene = new this._loadName();
            ResLoader_1.default.load(this._loadScene.dependAssets(), this, () => {
                this._loadScene.onLoad();
                this._loadScene.loadUrls(urls, this, this.loadComplete);
            });
        }
    }
    loadComplete() {
        this._curSence.onLoad();
    }
}
exports.default = SceneManager;

},{"./ViewManager":16,"./util/ResLoader":24}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TriggerCollisionScript3d extends Laya.Script3D {
    constructor() {
        super();
    }
    onTriggerEnter(other) {
        // log("onTriggerEnter");
        this._triggerEnterFuntion && this._triggerEnterFuntion.call(this._triggerEnterCaller, other);
    }
    onTriggerStay(other) {
        // log("onTriggerStay");
        this._triggerStayFuntion && this._triggerStayFuntion.call(this._triggerStayCaller, other);
    }
    onTriggerExit(other) {
        // log("onTriggerExit");  
        this._triggerExitFuntion && this._triggerExitFuntion.call(this._triggerExitCaller, other);
    }
    onCollisionEnter(collision) {
        // log("onCollisionEnter");  
        // if (collision.other.owner.name == "block") {
        // }
        this._collisionEnterFuntion && this._collisionEnterFuntion.call(this._collisionEnterCaller, collision);
    }
    onCollisionStay(collision) {
        // if (collision.other.owner.name == "block") {
        //     log("onCollisionStay"); 
        // }
        this._collisionStayFuntion && this._collisionStayFuntion.call(this._collisionStayCaller, collision);
    }
    onCollisionExit(collision) {
        // log("onCollisionExit");  
        // if (collision.other.owner.name == "block") {
        // }
        this._collisionExitFuntion && this._collisionExitFuntion.call(this._collisionExitCaller, collision);
    }
    setCollisionEnter(context, callBack) {
        this._collisionEnterCaller = context;
        this._collisionEnterFuntion = callBack;
    }
    setCollisionStay(context, callBack) {
        this._collisionStayCaller = context;
        this._collisionStayFuntion = callBack;
    }
    setCollisionExit(context, callBack) {
        this._collisionExitCaller = context;
        this._collisionExitFuntion = callBack;
    }
    setTriggerEnter(context, callBack) {
        this._triggerEnterCaller = context;
        this._triggerEnterFuntion = callBack;
    }
    setTriggerStay(context, callBack) {
        this._triggerStayCaller = context;
        this._triggerStayFuntion = callBack;
    }
    setTriggerExit(context, callBack) {
        this._triggerExitCaller = context;
        this._triggerExitFuntion = callBack;
    }
    onDestroy() {
        super.onDestroy();
        this._collisionEnterCaller = null;
        this._collisionEnterFuntion = null;
        this._collisionStayCaller = null;
        this._collisionStayFuntion = null;
        this._collisionExitCaller = null;
        this._collisionExitFuntion = null;
        this._triggerEnterCaller = null;
        this._triggerEnterFuntion = null;
        this._triggerStayCaller = null;
        this._triggerStayFuntion = null;
        this._triggerExitCaller = null;
        this._triggerExitFuntion = null;
    }
}
exports.default = TriggerCollisionScript3d;

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewOrder = void 0;
const BaseEntity_1 = require("./BaseEntity");
const FuiBaseView_1 = require("./FuiBaseView");
var ViewOrder;
(function (ViewOrder) {
    ViewOrder[ViewOrder["Low"] = 0] = "Low";
    ViewOrder[ViewOrder["Middle"] = 100] = "Middle";
    ViewOrder[ViewOrder["High"] = 200] = "High";
})(ViewOrder = exports.ViewOrder || (exports.ViewOrder = {}));
class ViewManager {
    constructor() {
        this._uiPanel = fgui.GRoot.inst.displayObject;
        Laya.stage.addChild(fgui.GRoot.inst.displayObject);
        this._uiPanel.zOrder = 10;
        this._viewMap = new Map();
    }
    static get Ins() {
        if (!ViewManager._viewManager) {
            ViewManager._viewManager = new ViewManager();
        }
        return ViewManager._viewManager;
    }
    static getUiPanel() {
        return ViewManager.Ins._uiPanel;
    }
    static addLoadingView(view, ...params) {
        let curEntity = new BaseEntity_1.default();
        let curView = curEntity.addComponent(view, params);
        if (curView instanceof FuiBaseView_1.default) {
            Laya.stage.addChild(curView.view.displayObject);
            curView.view.displayObject.zOrder = 20;
        }
        else {
            Laya.stage.addChild(curView.view);
            curView.view.zOrder = 20;
        }
        curView.onStart();
        return curView;
    }
    static addView(view, ...params) {
        let viewManager = ViewManager.Ins;
        let curEntity = new BaseEntity_1.default();
        let curView = curEntity.addComponent(view, params);
        if (curView instanceof FuiBaseView_1.default) {
            viewManager._uiPanel.addChild(curView.view.displayObject);
        }
        else {
            viewManager._uiPanel.addChild(curView.view);
        }
        viewManager._viewMap.set(curEntity.uuid, curEntity);
        curView.onStart();
        return curView;
    }
    static removeView(view) {
        let viewManager = ViewManager.Ins;
        let uuid = view.entity.uuid;
        if (view instanceof FuiBaseView_1.default) {
            viewManager._uiPanel.removeChild(view.view.displayObject);
        }
        else {
            viewManager._uiPanel.removeChild(view.view);
        }
        let curEntity = viewManager._viewMap.get(uuid);
        if (curEntity) {
            curEntity.onDestory();
            viewManager._viewMap.delete(uuid);
        }
    }
    static removeAllView() {
        let viewManager = ViewManager.Ins;
        viewManager._uiPanel && viewManager._uiPanel.removeChildren();
        viewManager._viewMap.forEach((item) => {
            item.onDestory();
        });
        viewManager._viewMap.clear();
    }
}
exports.default = ViewManager;

},{"./BaseEntity":4,"./FuiBaseView":11}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LogicScheduler_1 = require("../LogicScheduler");
class Action {
    constructor() {
        this.originalTarget = null;
        this.target = null;
        this.tag = -1;
    }
    /**
     * !#en
     * return true if the action has finished.
     * !#zh 如果动作已完成就返回 true。
     * @method isDone
     * @return {Boolean}
     */
    isDone() {
        return true;
    }
    // called before the action start. It will also set the target.
    startWithTarget(target) {
        this.originalTarget = target;
        this.target = target;
    }
    // called after the action has finished. It will set the 'target' to nil.
    stop() {
        this.target = null;
    }
    // called every frame with it's delta time. <br />
    step(t) {
    }
    update(t) {
    }
    /**
     * !#en get the target.
     * !#zh 获取当前目标节点。
     * @method getTarget
     * @return {Node}
     */
    getTarget() {
        return this.target;
    }
    /**
     * !#en The action will modify the target properties.
     * !#zh 设置目标节点。
     * @method setTarget
     * @param {Node} target
     */
    setTarget(target) {
        this.target = target;
    }
    /**
     * !#en get the original target.
     * !#zh 获取原始目标节点。
     * @method getOriginalTarget
     * @return {Node}
     */
    getOriginalTarget() {
        return this.originalTarget;
    }
    // Set the original target, since target can be nil.
    // Is the target that were used to run the action.
    // Unless you are doing something complex, like cc.ActionManager, you should NOT call this method.
    setOriginalTarget(originalTarget) {
        this.originalTarget = originalTarget;
    }
    /**
     * !#en get tag number.
     * !#zh 获取用于识别动作的标签。
     * @method getTag
     * @return {Number}
     */
    getTag() {
        return this.tag;
    }
    /**
     * !#en set tag number.
     * !#zh 设置标签，用于识别动作。
     * @method setTag
     * @param {Number} tag
     */
    setTag(tag) {
        this.tag = tag;
    }
    // Currently JavaScript Bindigns (JSB), in some cases, needs to use retain and release. This is a bug in JSB,
    // and the ugly workaround is to use retain/release. So, these 2 methods were added to be compatible with JSB.
    // This is a hack, and should be removed once JSB fixes the retain/release bug.
    retain() {
    }
    // Currently JavaScript Bindigns (JSB), in some cases, needs to use retain and release. This is a bug in JSB,
    // and the ugly workaround is to use retain/release. So, these 2 methods were added to be compatible with JSB.
    // This is a hack, and should be removed once JSB fixes the retain/release bug.
    release() {
    }
    onDestory() {
        this.originalTarget = null;
        this.target = null;
        this.tag = -1;
    }
}
exports.default = Action;
// 浮点数最小值
Action.FLT_EPSILON = 0.0000001192092896;
// 帧率
Action.FRAME_RATE = LogicScheduler_1.default.frameRate / 1000;
Action.ENABLE_STACKABLE_ACTIONS = true;

},{"../LogicScheduler":13}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LogicScheduler_1 = require("../LogicScheduler");
const Action_1 = require("./Action");
class HashElement {
    constructor() {
        this.actions = [];
        this.target = null;
        this.actionIndex = 0;
        this.currentAction = null;
        this.paused = false;
        this.lock = false;
    }
}
class ActionManager {
    constructor() {
        this._elementPool = [];
        this._hashTargets = new Map();
        this._arrayTargets = [];
        this._currentTarget = null;
        LogicScheduler_1.default.loopFrame(1, this, this.update);
    }
    static get Ins() {
        if (!ActionManager._ActionManager) {
            ActionManager._ActionManager = new ActionManager();
        }
        return ActionManager._ActionManager;
    }
    getElement(target, paused) {
        let element = this._elementPool.pop();
        if (!element) {
            element = new HashElement();
        }
        element.target = target;
        element.paused = !!paused;
        return element;
    }
    putElement(element) {
        element.actions.length = 0;
        element.actionIndex = 0;
        element.currentAction = null;
        element.paused = false;
        element.target = null;
        element.lock = false;
        this._elementPool.push(element);
    }
    /**
     * 增加一个动作，同时还需要提供动作的目标对象，目标对象是否暂停作为参数。<br/>
     * 如果目标已存在，动作将会被直接添加到现有的节点中。<br/>
     * 如果目标不存在，将为这一目标创建一个新的实例，并将动作添加进去。<br/>
     * 当目标状态的 paused 为 true，动作将不会被执行
     */
    addAction(action, target, paused = false) {
        if (!action || !target) {
            return;
        }
        //check if the action target already exists
        let element = this._hashTargets[target.uuid];
        //if doesn't exists, create a hashelement and push in mpTargets
        if (!element) {
            element = this.getElement(target, paused);
            this._hashTargets[target.uuid] = element;
            this._arrayTargets.push(element);
        }
        else if (!element.actions) {
            element.actions = [];
        }
        element.actions.push(action);
        action.startWithTarget(target);
    }
    static addAction(action, target, paused = false) {
        ActionManager.Ins.addAction(action, target, paused);
    }
    /**
     * 移除所有对象的所有动作。
     * @method removeAllActions
     */
    removeAllActions() {
        let locTargets = this._arrayTargets;
        for (let i = 0; i < locTargets.length; i++) {
            let element = locTargets[i];
            if (element)
                this.putElement(element);
        }
        this._arrayTargets.length = 0;
        this._hashTargets.clear();
    }
    /**
     * 移除指定对象上的所有动作。<br/>
     * 属于该目标的所有的动作将被删除。
     */
    removeAllActionsFromTarget(target) {
        if (target == null)
            return;
        let element = this._hashTargets[target.uuid];
        if (element) {
            element.actions.length = 0;
            this.deleteHashElement(element);
        }
    }
    static removeAllActionsFromTarget(target) {
        ActionManager.Ins.removeAllActionsFromTarget(target);
    }
    /**
     * 移除指定的动作。
     */
    removeAction(action) {
        // explicit null handling
        if (action == null)
            return;
        let target = action.getOriginalTarget();
        let element = this._hashTargets[target.uuid];
        if (element) {
            for (let i = 0; i < element.actions.length; i++) {
                if (element.actions[i] === action) {
                    action.onDestory();
                    element.actions.splice(i, 1);
                    // update actionIndex in case we are in tick. looping over the actions
                    if (element.actionIndex >= i)
                        element.actionIndex--;
                    break;
                }
            }
        }
        else {
        }
    }
    /**
     * 删除指定对象下特定标签的一个动作，将删除首个匹配到的动作。
     */
    removeActionByTag(tag, target) {
        let element = this._hashTargets[target.uuid];
        if (element) {
            let limit = element.actions.length;
            for (let i = 0; i < limit; ++i) {
                let action = element.actions[i];
                if (action && action.getTag() === tag && action.getOriginalTarget() === target) {
                    action.onDestory();
                    this.removeActionAtIndex(i, element);
                    break;
                }
            }
        }
    }
    /**
     * !#zh 通过目标对象和标签获取一个动作。
     * @method getActionByTag
     * @param {Number} tag
     * @param {Node} target
     * @return {Action|Null}  return the Action with the given tag on success
     */
    getActionByTag(tag, target) {
        let element = this._hashTargets[target.uuid];
        if (element) {
            if (element.actions != null) {
                for (let i = 0; i < element.actions.length; ++i) {
                    let action = element.actions[i];
                    if (action && action.getTag() === tag)
                        return action;
                }
            }
        }
        return null;
    }
    /**
     * 返回指定对象下所有正在运行的动作数量。 <br/>
     * 组合动作被算作一个动作。<br/>
     * 例如：<br/>
     *  - 如果您正在运行 7 个动作组成的序列动作（Sequence），这个函数将返回 1。<br/>
     *  - 如果你正在运行 2 个序列动作（Sequence）和 5 个普通动作，这个函数将返回 7。<br/>
     *
     * @method getNumberOfRunningActionsInTarget
     * @param {Node} target
     * @return {Number}
     */
    getNumberOfRunningActionsInTarget(target) {
        let element = this._hashTargets[target.uuid];
        if (element)
            return (element.actions) ? element.actions.length : 0;
        return 0;
    }
    /**
     * 暂停指定对象：所有正在运行的动作和新添加的动作都将会暂停。
     * @method pauseTarget
     * @param {Node} target
     */
    pauseTarget(target) {
        let element = this._hashTargets[target.uuid];
        if (element)
            element.paused = true;
    }
    /**
     * 让指定目标恢复运行。在执行序列中所有被暂停的动作将重新恢复运行。
     * @method resumeTarget
     * @param {Node} target
     */
    resumeTarget(target) {
        let element = this._hashTargets[target.uuid];
        if (element)
            element.paused = false;
    }
    /**
     * 暂停所有正在运行的动作，返回一个包含了那些动作被暂停了的目标对象的列表。
     * @method pauseAllRunningActions
     * @return {Array}  a list of targets whose actions were paused.
     */
    pauseAllRunningActions() {
        let idsWithActions = [];
        let locTargets = this._arrayTargets;
        for (let i = 0; i < locTargets.length; i++) {
            let element = locTargets[i];
            if (element && !element.paused) {
                element.paused = true;
                idsWithActions.push(element.target);
            }
        }
        return idsWithActions;
    }
    /**
     * 让一组指定对象恢复运行（用来逆转 pauseAllRunningActions 效果的便捷函数）。
     * @method resumeTargets
     * @param {Array} targetsToResume
     */
    resumeTargets(targetsToResume) {
        if (!targetsToResume)
            return;
        for (let i = 0; i < targetsToResume.length; i++) {
            if (targetsToResume[i])
                this.resumeTarget(targetsToResume[i]);
        }
    }
    /**
     * !#zh 暂停一组指定对象。
     * @method pauseTargets
     * @param {Array} targetsToPause
     */
    pauseTargets(targetsToPause) {
        if (!targetsToPause)
            return;
        for (let i = 0; i < targetsToPause.length; i++) {
            if (targetsToPause[i])
                this.pauseTarget(targetsToPause[i]);
        }
    }
    /**
     * 清除共用的动作管理器。它释放了持有的实例。 <br/>
     * 因为它使用 this，因此它不能是静态的。
     * @method purgeSharedManager
     */
    purgeSharedManager() {
        LogicScheduler_1.default.clearAll(this);
    }
    removeActionAtIndex(index, element) {
        element.actions.splice(index, 1);
        // update actionIndex in case we are in tick. looping over the actions
        if (element.actionIndex >= index)
            element.actionIndex--;
        if (element.actions.length === 0) {
            this.deleteHashElement(element);
        }
    }
    deleteHashElement(element) {
        let ret = false;
        if (element && !element.lock) {
            if (this._hashTargets[element.target.uuid]) {
                delete this._hashTargets[element.target.uuid];
                let targets = this._arrayTargets;
                for (let i = 0, l = targets.length; i < l; i++) {
                    if (targets[i] === element) {
                        targets.splice(i, 1);
                        break;
                    }
                }
                this.putElement(element);
                ret = true;
            }
        }
        return ret;
    }
    /**
     * ActionManager 主循环。
     * @method update
     */
    update() {
        let dt = Action_1.default.FRAME_RATE;
        let locTargets = this._arrayTargets;
        for (let elt = 0; elt < locTargets.length; elt++) {
            this._currentTarget = locTargets[elt];
            let locCurrTarget = this._currentTarget;
            if (!locCurrTarget.paused && locCurrTarget.actions) {
                locCurrTarget.lock = true;
                for (locCurrTarget.actionIndex = 0; locCurrTarget.actionIndex < locCurrTarget.actions.length; locCurrTarget.actionIndex++) {
                    locCurrTarget.currentAction = locCurrTarget.actions[locCurrTarget.actionIndex];
                    if (!locCurrTarget.currentAction)
                        continue;
                    //use for speed
                    locCurrTarget.currentAction.step(dt * (locCurrTarget.currentAction._speedMethod ? locCurrTarget.currentAction._speed : 1));
                    if (locCurrTarget.currentAction && locCurrTarget.currentAction.isDone()) {
                        locCurrTarget.currentAction.stop();
                        let action = locCurrTarget.currentAction;
                        // Make currentAction nil to prevent removeAction from salvaging it.
                        locCurrTarget.currentAction = null;
                        this.removeAction(action);
                    }
                    locCurrTarget.currentAction = null;
                }
                locCurrTarget.lock = false;
            }
            // only delete currentTarget if no actions were scheduled during the cycle (issue #481)
            if (locCurrTarget.actions.length === 0) {
                this.deleteHashElement(locCurrTarget) && elt--;
            }
        }
    }
}
exports.default = ActionManager;

},{"../LogicScheduler":13,"./Action":17}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CameraMoveScript extends Laya.Script3D {
    constructor() {
        super();
        /** @private */
        this._tempVector3 = new Laya.Vector3();
        this.yawPitchRoll = new Laya.Vector3();
        this.resultRotation = new Laya.Quaternion();
        this.tempRotationZ = new Laya.Quaternion();
        this.tempRotationX = new Laya.Quaternion();
        this.tempRotationY = new Laya.Quaternion();
        this.rotaionSpeed = 0.00006;
    }
    /**
     * @private
     */
    _updateRotation() {
        if (Math.abs(this.yawPitchRoll.y) < 1.50) {
            Laya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);
            this.tempRotationZ.cloneTo(this.camera.transform.localRotation);
            this.camera.transform.localRotation = this.camera.transform.localRotation;
        }
    }
    /**
     * @inheritDoc
     */
    onAwake() {
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_UP, this, this.mouseUp);
        //Laya.stage.on(Event.RIGHT_MOUSE_OUT, this, mouseOut);
        this.camera = this.owner;
    }
    /**
     * @inheritDoc
     */
    onUpdate() {
        let elapsedTime = Laya.timer.delta;
        if (!isNaN(this.lastMouseX) && !isNaN(this.lastMouseY) && this.isMouseDown) {
            let scene = this.owner.scene;
            Laya.KeyBoardManager.hasKeyDown(87) && this.moveForward(-0.01 * elapsedTime); //W
            Laya.KeyBoardManager.hasKeyDown(83) && this.moveForward(0.01 * elapsedTime); //S
            Laya.KeyBoardManager.hasKeyDown(65) && this.moveRight(-0.01 * elapsedTime); //A
            Laya.KeyBoardManager.hasKeyDown(68) && this.moveRight(0.01 * elapsedTime); //D
            Laya.KeyBoardManager.hasKeyDown(81) && this.moveVertical(0.01 * elapsedTime); //Q
            Laya.KeyBoardManager.hasKeyDown(69) && this.moveVertical(-0.01 * elapsedTime); //E
            let offsetX = Laya.stage.mouseX - this.lastMouseX;
            let offsetY = Laya.stage.mouseY - this.lastMouseY;
            let yprElem = this.yawPitchRoll;
            yprElem.x -= offsetX * this.rotaionSpeed * elapsedTime;
            yprElem.y -= offsetY * this.rotaionSpeed * elapsedTime;
            this._updateRotation();
        }
        this.lastMouseX = Laya.stage.mouseX;
        this.lastMouseY = Laya.stage.mouseY;
    }
    /**
     * @inheritDoc
     */
    onDestroy() {
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_UP, this, this.mouseUp);
    }
    mouseDown(e) {
        this.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.lastMouseX = Laya.stage.mouseX;
        this.lastMouseY = Laya.stage.mouseY;
        this.isMouseDown = true;
    }
    mouseUp(e) {
        this.isMouseDown = false;
    }
    mouseOut(e) {
        this.isMouseDown = false;
    }
    /**
     * 向前移动。
     * @param distance 移动距离。
     */
    moveForward(distance) {
        this._tempVector3.x = this._tempVector3.y = 0;
        this._tempVector3.z = distance;
        this.camera.transform.translate(this._tempVector3);
    }
    /**
     * 向右移动。
     * @param distance 移动距离。
     */
    moveRight(distance) {
        this._tempVector3.y = this._tempVector3.z = 0;
        this._tempVector3.x = distance;
        this.camera.transform.translate(this._tempVector3);
    }
    /**
     * 向上移动。
     * @param distance 移动距离。
     */
    moveVertical(distance) {
        this._tempVector3.x = this._tempVector3.z = 0;
        this._tempVector3.y = distance;
        this.camera.transform.translate(this._tempVector3, false);
    }
}
exports.default = CameraMoveScript;

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityType = void 0;
var EntityType;
(function (EntityType) {
    EntityType["BaseEntity"] = "BaseEntity";
    EntityType["Furit"] = "Furit";
    EntityType["Boat"] = "Boat";
    EntityType["Player"] = "Player";
    EntityType["Prop"] = "Prop";
})(EntityType = exports.EntityType || (exports.EntityType = {}));

},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameRate = void 0;
/**游戏帧率 */
exports.FrameRate = 60;

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNewUuid = exports.globalId = void 0;
exports.globalId = Math.floor(Math.random() * 516);
function getNewUuid() {
    return ++exports.globalId;
}
exports.getNewUuid = getNewUuid;

},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logTime = exports.error = exports.warn = exports.log = exports.logState = void 0;
exports.logState = true;
function log(content, ...subst) {
    if (exports.logState) {
        console.log(content, ...subst);
    }
}
exports.log = log;
function warn(content, ...subst) {
    if (exports.logState) {
        console.warn(content, ...subst);
    }
}
exports.warn = warn;
function error(content, ...subst) {
    if (exports.logState) {
        console.error(content, ...subst);
    }
}
exports.error = error;
function logTime(name, finish) {
    if (exports.logState) {
        if (finish) {
            console.timeEnd(name);
        }
        else {
            console.time(name);
        }
    }
}
exports.logTime = logTime;

},{}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("./Logger");
class ResLoader {
    static get Ins() {
        if (!ResLoader._resLoader) {
            ResLoader._resLoader = new ResLoader();
        }
        return ResLoader._resLoader;
    }
    static clearRes(urls) {
        for (let i = 0; i < urls.length; i++) {
            let res = Laya.loader.getRes(urls[i]);
            if (res instanceof Laya.Sprite3D) {
                res.transform && res.destroy(true);
            }
            Laya.loader.clearRes(urls[i]);
        }
    }
    static getResAsync(url) {
        return new Promise((resolve, reject) => {
            let res = Laya.loader.getRes(url);
            if (res) {
                // 已存在
                resolve(res);
            }
            else {
                // 异步加载
                ResLoader.load([url], this, () => {
                    let res = Laya.loader.getRes(url);
                    if (!res)
                        reject();
                    resolve(res);
                });
            }
        });
    }
    static getRes(url) {
        let res = Laya.loader.getRes(url);
        if (res) {
            return res;
        }
        else {
            Logger_1.error("getRes fails: " + url);
            return null;
        }
    }
    static getResSafe(url, context = null, complete = null) {
        let res = Laya.loader.getRes(url);
        if (res) {
            complete.apply(context, [res]);
        }
        else {
            ResLoader.load([url], this, () => {
                let res = Laya.loader.getRes(url);
                complete.apply(context, [res]);
            });
        }
    }
    static loadRes(url, context = null, complete = null) {
        ResLoader.load([url], context, complete);
    }
    static load(urls, context = null, complete = null, progress = null) {
        let infoUrls = [];
        for (let i = 0; i < urls.length; i++) {
            let url = urls[i];
            let type = Laya.Loader.getTypeFromUrl(url);
            if (!type) {
                let ext = Laya.Utils.getFileExtension(url);
                switch (ext) {
                    case "lh":
                    case "ls":
                        type = Laya.Loader.HIERARCHY;
                        break;
                    case "lm":
                        type = Laya.Loader.MESH;
                        break;
                    case "lmat":
                        type = Laya.Loader.MATERIAL;
                        break;
                    case "ltc":
                        type = Laya.Loader.TEXTURECUBE;
                        break;
                    case "bmp":
                    case "gif":
                    case "dds":
                    case "ktx":
                    case "pvr":
                        type = Laya.Loader.TEXTURE2D;
                        break;
                    case "lani":
                        type = Laya.Loader.ANIMATIONCLIP;
                        break;
                    case "lav":
                        type = Laya.Loader.AVATAR;
                        break;
                    case "thdata":
                        type = Laya.Loader.TERRAINHEIGHTDATA;
                        break;
                    default:
                        type = Laya.Loader.BUFFER;
                        break;
                }
            }
            infoUrls.push({ url, type });
        }
        if (infoUrls.length <= 0) {
            complete.call(context);
            return;
        }
        let completeHandler = null;
        let progressHandler = null;
        if (context) {
            if (complete) {
                completeHandler = Laya.Handler.create(context, complete);
            }
            if (progress) {
                progressHandler = Laya.Handler.create(context, progress);
            }
        }
        Laya.loader.create(infoUrls, completeHandler, progressHandler);
    }
}
exports.default = ResLoader;

},{"./Logger":23}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingletonManager = void 0;
class SingletonManager {
    static get(c) {
        let singleton = this.pool.get(c);
        if (null == singleton) {
            singleton = new c();
            this.pool.set(c, singleton);
        }
        return singleton;
    }
    static getPool(c) {
        return this.pool.get(c);
    }
    static remove(c) {
        return this.pool.delete(c);
    }
    static clear() {
        this.pool.clear();
    }
}
exports.SingletonManager = SingletonManager;
SingletonManager.pool = new Map();

},{}],26:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
const UI_Loading_1 = require("./UI_Loading");
const UI_ProgressBar_1 = require("./UI_ProgressBar");
class CommonBinder {
    static bindAll() {
        fgui.UIObjectFactory.setExtension(UI_Loading_1.default.URL, UI_Loading_1.default);
        fgui.UIObjectFactory.setExtension(UI_ProgressBar_1.default.URL, UI_ProgressBar_1.default);
    }
}
exports.default = CommonBinder;

},{"./UI_Loading":27,"./UI_ProgressBar":28}],27:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_Loading extends fgui.GComponent {
    static createInstance() {
        return (fgui.UIPackage.createObject("Common", "Loading"));
    }
    onConstruct() {
        this.m_bg = (this.getChild("bg"));
        this.m_progressBar = (this.getChild("progressBar"));
        this.m_n7 = (this.getChild("n7"));
    }
}
exports.default = UI_Loading;
UI_Loading.URL = "ui://iic8enjxb1se0";

},{}],28:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_ProgressBar extends fgui.GProgressBar {
    static createInstance() {
        return (fgui.UIPackage.createObject("Common", "ProgressBar"));
    }
    onConstruct() {
        this.m_n0 = (this.getChild("n0"));
        this.m_bar = (this.getChild("bar"));
    }
}
exports.default = UI_ProgressBar;
UI_ProgressBar.URL = "ui://iic8enjxb1se1";

},{}],29:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
const UI_JoyStick_1 = require("./UI_JoyStick");
const UI_GGJGame_1 = require("./UI_GGJGame");
const UI_StartButton_1 = require("./UI_StartButton");
const UI_ProgressBar_1 = require("./UI_ProgressBar");
const UI_ProgressBar2_1 = require("./UI_ProgressBar2");
const UI_Book_1 = require("./UI_Book");
class GGJGameBinder {
    static bindAll() {
        fgui.UIObjectFactory.setExtension(UI_JoyStick_1.default.URL, UI_JoyStick_1.default);
        fgui.UIObjectFactory.setExtension(UI_GGJGame_1.default.URL, UI_GGJGame_1.default);
        fgui.UIObjectFactory.setExtension(UI_StartButton_1.default.URL, UI_StartButton_1.default);
        fgui.UIObjectFactory.setExtension(UI_ProgressBar_1.default.URL, UI_ProgressBar_1.default);
        fgui.UIObjectFactory.setExtension(UI_ProgressBar2_1.default.URL, UI_ProgressBar2_1.default);
        fgui.UIObjectFactory.setExtension(UI_Book_1.default.URL, UI_Book_1.default);
    }
}
exports.default = GGJGameBinder;

},{"./UI_Book":30,"./UI_GGJGame":31,"./UI_JoyStick":32,"./UI_ProgressBar":33,"./UI_ProgressBar2":34,"./UI_StartButton":35}],30:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_Book extends fgui.GComponent {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "Book"));
    }
    onConstruct() {
        this.m_bg = (this.getChild("bg"));
        this.m_n0 = (this.getChild("n0"));
        this.m_btn1 = (this.getChild("btn1"));
        this.m_btn2 = (this.getChild("btn2"));
        this.m_book = (this.getChild("book"));
    }
}
exports.default = UI_Book;
UI_Book.URL = "ui://zj1db5ndymeir";

},{}],31:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_GGJGame extends fgui.GComponent {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "GGJGame"));
    }
    onConstruct() {
        this.m_n40 = (this.getChild("n40"));
        this.m_hpBar = (this.getChild("hpBar"));
        this.m_hpIcon = (this.getChild("hpIcon"));
        this.m_hpText = (this.getChild("hpText"));
        this.m_mpBar = (this.getChild("mpBar"));
        this.m_mpIcon = (this.getChild("mpIcon"));
        this.m_mpText = (this.getChild("mpText"));
        this.m_n41 = (this.getChild("n41"));
        this.m_grass2 = (this.getChild("grass2"));
        this.m_bag = (this.getChild("bag"));
        this.m_n17 = (this.getChild("n17"));
        this.m_n32 = (this.getChild("n32"));
        this.m_n31 = (this.getChild("n31"));
        this.m_n33 = (this.getChild("n33"));
        this.m_n35 = (this.getChild("n35"));
        this.m_btn1 = (this.getChild("btn1"));
        this.m_book = (this.getChild("book"));
        this.m_n37 = (this.getChild("n37"));
        this.m_grass1 = (this.getChild("grass1"));
        this.m_t0 = this.getTransition("t0");
        this.m_t1 = this.getTransition("t1");
    }
}
exports.default = UI_GGJGame;
UI_GGJGame.URL = "ui://zj1db5ndymei0";

},{}],32:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_JoyStick extends fgui.GComponent {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "JoyStick"));
    }
    onConstruct() {
        this.m_bg = (this.getChild("bg"));
        this.m_stickBar = (this.getChild("stickBar"));
    }
}
exports.default = UI_JoyStick;
UI_JoyStick.URL = "ui://zj1db5ndqjwp0";

},{}],33:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_ProgressBar extends fgui.GProgressBar {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "ProgressBar"));
    }
    onConstruct() {
        this.m_n0 = (this.getChild("n0"));
        this.m_bar = (this.getChild("bar"));
    }
}
exports.default = UI_ProgressBar;
UI_ProgressBar.URL = "ui://zj1db5ndymeij";

},{}],34:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_ProgressBar2 extends fgui.GProgressBar {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "ProgressBar2"));
    }
    onConstruct() {
        this.m_n0 = (this.getChild("n0"));
        this.m_bar = (this.getChild("bar"));
    }
}
exports.default = UI_ProgressBar2;
UI_ProgressBar2.URL = "ui://zj1db5ndymein";

},{}],35:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
class UI_StartButton extends fgui.GButton {
    static createInstance() {
        return (fgui.UIPackage.createObject("GGJGame", "StartButton"));
    }
    onConstruct() {
        this.m_button = this.getController("button");
        this.m_n0 = (this.getChild("n0"));
        this.m_n1 = (this.getChild("n1"));
        this.m_n2 = (this.getChild("n2"));
        this.m_n3 = (this.getChild("n3"));
        this.m_title = (this.getChild("title"));
    }
}
exports.default = UI_StartButton;
UI_StartButton.URL = "ui://zj1db5ndymei3";

},{}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SingletonManager_1 = require("../core/util/SingletonManager");
class GameManager {
    constructor() {
        this.gameScore = 0;
        this.hp = 0;
        this.mp = 0;
        this.hpMax = 0;
        this.mpMax = 0;
        this.curFuritCount = 0;
        this.furitMax = 20;
        this.curRubbisCount = 0;
        this.rubbisMax = 20;
        this.curRubbishCount = 0;
        this.isOver = false;
    }
    static get I() {
        return SingletonManager_1.SingletonManager.get(GameManager);
    }
    static init() {
        GameManager.I.clear();
    }
    end() {
        this.gameView = null;
        this.gameViewPanel = null;
    }
    start() {
        this.gameScore = 0;
        this.gameView.updateScore();
    }
    setGGJGameView(view) {
        this.ggjGameView = view;
    }
    setGameView(view) {
        this.gameView = view;
        this.gameViewPanel = this.gameView.view;
    }
    boomJuice(type, pos) {
        this.gameView.boomJuice(type, pos);
    }
    addScore(score = 1) {
        this.gameScore += score;
        this.gameView.updateScore();
    }
    clear() {
    }
}
exports.default = GameManager;

},{"../core/util/SingletonManager":25}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CameraMoveScript_1 = require("../../core/util/CameraMoveScript");
class GameCamera extends Laya.Sprite3D {
    constructor() {
        super();
        this.pVector = new Laya.Vector3(0, 0, 1);
        this.init();
    }
    init() {
        this.camera = new Laya.Camera(0, 0.1, 100);
        this.addChild(this.camera);
        this.transform.translate(new Laya.Vector3(0, 0, 0));
        this.transform.rotate(new Laya.Vector3(0, 0, 0), true, false);
        // this.camera.transform.translate(new Laya.Vector3(0,10,0), false);
        // this.camera.orthographic = true;
        // //正交投影垂直矩阵尺寸
        // this.camera.orthographicVerticalSize = 15;
        this.camera.addComponent(CameraMoveScript_1.default);
        this.camera.transform.localPosition = new Laya.Vector3(-1.6580356460344328, 6.967827617289275, -20.713586838585343);
        this.camera.transform.localRotationEuler = new Laya.Vector3(-19.849549854512237, -177.8062966419396, 0.0000020367450761015452);
    }
    worldToViewportPoint(v3) {
        let transPos = new Laya.Vector4(0, 0, 0, 0);
        let renderTarget = this.camera.renderTarget;
        this.camera.renderTarget = null;
        this.camera.worldToViewportPoint(v3, transPos);
        this.camera.renderTarget = renderTarget;
        return new Laya.Vector2(transPos.x, transPos.y);
    }
    translate(pos) {
        this.transform.translate(pos, false);
    }
    lookAt(pos) {
        this.transform.lookAt(pos, this.pVector);
    }
    getDistance(pos) {
        let camPos = this.camera.transform.position;
        let dx = pos.x - camPos.x;
        let dz = pos.z - camPos.z;
        return Math.sqrt(dx * dx + dz * dz);
    }
}
exports.default = GameCamera;

},{"../../core/util/CameraMoveScript":19}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResLoader_1 = require("../../core/util/ResLoader");
const propConfig_1 = require("../config/propConfig");
/**
 * 游戏配置数据
 */
class GameConfigData {
    static get Ins() {
        if (!GameConfigData._gameConfigData) {
            GameConfigData._gameConfigData = new GameConfigData();
        }
        return GameConfigData._gameConfigData;
    }
    init() {
        ResLoader_1.default.load([
            propConfig_1.PropConfig.resPath,
        ], this, this.onLoad);
    }
    onLoad() {
        this.propConfig = propConfig_1.PropConfig.deserialize();
    }
    getPropConfigData(id) {
        for (let i = 0; i < this.propConfig.length; i++) {
            let data = this.propConfig[i];
            if (id == data.index) {
                return data;
            }
        }
    }
}
exports.default = GameConfigData;

},{"../../core/util/ResLoader":24,"../config/propConfig":45}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectConfig = void 0;
const ResLoader_1 = require("../../core/util/ResLoader");
class ProjectConfig {
    get cdnUrl() {
        return this._cdnUrl;
    }
    static get Ins() {
        if (!ProjectConfig._configData) {
            ProjectConfig._configData = new ProjectConfig();
        }
        return ProjectConfig._configData;
    }
    init() {
        let json = ResLoader_1.default.getRes("config.json");
        let curEvn = json["curEvn"]["platform"];
        let curData = json["platforms"][curEvn];
        this._cdnUrl = curData["cdn"];
    }
}
exports.ProjectConfig = ProjectConfig;
ProjectConfig.resPath = "config.json";

},{"../../core/util/ResLoader":24}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoatCollisionComp = void 0;
const BaseComponent_1 = require("../../core/BaseComponent");
const BindEntityScript_1 = require("../../core/BindEntityScript");
const TriggerCollisionScript3d_1 = require("../../core/TriggerCollisionScript3d");
const EntityTypeDefine_1 = require("../../core/util/EntityTypeDefine");
class BoatCollisionComp extends BaseComponent_1.default {
    constructor() {
        super();
    }
    init(prefab) {
        this.boat = this.entity;
        this.prefab = prefab;
        this.collisionScript = this.prefab.addComponent(TriggerCollisionScript3d_1.default);
        this.collisionScript.setCollisionEnter(this, this.onCollisionEnter);
        this.collisionScript.setTriggerEnter(this, this.onTriggerEnter);
    }
    destoryScript() {
        this.collisionScript.destroy();
    }
    onTriggerEnter(other) {
        let sprite = other.owner;
        if (sprite) {
            let bindEntityScript = sprite.getComponent(BindEntityScript_1.default);
            if (bindEntityScript) {
                let entityType = bindEntityScript.entity.entityType;
                if (entityType == EntityTypeDefine_1.EntityType.Furit) {
                    let curFurit = bindEntityScript.entity;
                    // 类型相同触发碰撞
                }
            }
        }
    }
    onCollisionEnter(collision) {
        let sprite = collision;
    }
    onDestory() {
        this.collisionScript && this.collisionScript.onDestroy();
        this.collisionScript = null;
        super.onDestory();
    }
    onEnable() {
        super.onEnable();
    }
    onDisable() {
        super.onDisable();
    }
}
exports.BoatCollisionComp = BoatCollisionComp;

},{"../../core/BaseComponent":3,"../../core/BindEntityScript":9,"../../core/TriggerCollisionScript3d":15,"../../core/util/EntityTypeDefine":20}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoatControlComp = void 0;
/**
 * 角色控制
 */
const EventManager_1 = require("../../core/EventManager");
const Role_1 = require("../prefab/Role");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
const JoyStrickCtrl_1 = require("../view/JoyStrickCtrl");
const RoleControlComp_1 = require("./RoleControlComp");
class BoatControlComp extends RoleControlComp_1.RoleControlComp {
    constructor() {
        super();
        this.cameraTranslate = new Laya.Vector3(0, 0, 0);
        this.gameCamera = GGJPlayScene3D_1.default.I.gameCamera;
    }
    onLoad() {
        super.onLoad();
    }
    init(prefab) {
        super.init(prefab);
        let sphereShape = new Laya.BoxColliderShape(2, 0.3, 3);
        sphereShape.localOffset = new Laya.Vector3(-0.1, 0.15, -0.24);
        this.character.colliderShape = sphereShape;
        EventManager_1.default.on(JoyStrickCtrl_1.JoyCmd.STOP, this, this.stopCmd);
        EventManager_1.default.on(JoyStrickCtrl_1.JoyCmd.MOVE, this, this.moveCmd);
        this.preX = this.prefab.transform.position.x;
        this.preZ = this.prefab.transform.position.z;
        this.entity.on(Role_1.RoleEvent.State, this, this.stateChange);
    }
    resetPos() {
        this._logicPrefab.transform.localPosition = this.prefab.transform.localPosition.clone();
    }
    onDestory() {
        super.onDestory();
    }
    onEnable() {
        super.onEnable();
    }
    stateChange(state) {
    }
    stopCmd() {
        this._cmdAngle = null;
        if (!this.entity.model.enableMove()) {
            return;
        }
        this.entity.idle();
        this.cameraTranslate = new Laya.Vector3(0, 0, 0);
    }
    moveCmd(angle, dev) {
        if (!this.entity.model.enableMove()) {
            return;
        }
        this._cmdAngle = 270 - angle;
        if (this._cmdAngle < 0) {
            this._cmdAngle += 360;
        }
        this.entity.run();
    }
    update() {
        super.update();
        // 摄像机跟随角色
        this.cameraTranslate = new Laya.Vector3((this.prefab.transform.position.x - this.preX), 0, (this.prefab.transform.position.z - this.preZ));
        this.gameCamera.translate(this.cameraTranslate);
        this.preX = this.prefab.transform.position.x;
        this.preZ = this.prefab.transform.position.z;
    }
    onDisable() {
        super.onDisable();
    }
}
exports.BoatControlComp = BoatControlComp;

},{"../../core/EventManager":10,"../prefab/Role":58,"../scene/GGJPlayScene3D":60,"../view/JoyStrickCtrl":68,"./RoleControlComp":44}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropCollisionComp = void 0;
const BaseComponent_1 = require("../../core/BaseComponent");
const BindEntityScript_1 = require("../../core/BindEntityScript");
const EventManager_1 = require("../../core/EventManager");
const TriggerCollisionScript3d_1 = require("../../core/TriggerCollisionScript3d");
const GameManager_1 = require("../GameManager");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
const GGJGameView_1 = require("../view/GGJGameView");
class PropCollisionComp extends BaseComponent_1.default {
    constructor() {
        super();
    }
    init(prefab) {
        this.prop = this.entity;
        this.prefab = prefab;
        this.collisionScript = this.prefab.addComponent(TriggerCollisionScript3d_1.default);
        this.collisionScript.setCollisionEnter(this, this.onCollisionEnter);
        this.collisionScript.setTriggerEnter(this, this.onTriggerEnter);
    }
    destoryScript() {
        this.collisionScript.destroy();
    }
    onTriggerEnter(other) {
        let sprite = other.owner;
        if (sprite) {
            let bindEntityScript = sprite.getComponent(BindEntityScript_1.default);
            if (bindEntityScript) {
                let entityType = bindEntityScript.entity.entityType;
            }
        }
    }
    onCollisionEnter(collision) {
        let sprite = collision.other;
        // if (sprite) {
        //     let bindEntityScript: BindEntityScript = sprite.getComponent(BindEntityScript);
        //     if (bindEntityScript) {
        //         this.excuteEffect(bindEntityScript);
        //     }
        // }
        this.excuteEffect();
    }
    excuteEffect() {
        Laya.SoundManager.playSound("res/other/Salve.wav");
        if (this.prop.configData.index == 10) {
            if (GameManager_1.default.I.isOver == false) {
                EventManager_1.default.emit(GGJGameView_1.GGJGameViewCmd.GAMEOVER, true);
                GameManager_1.default.I.isOver = true;
            }
        }
        else {
            if (this.prop.configData.isFurit == 1) {
                // 捡到了水果
                GameManager_1.default.I.curFuritCount--;
                GameManager_1.default.I.hp += 15;
                EventManager_1.default.emit(GGJGameView_1.GGJGameViewCmd.ADDFURIT, this.prop.configData.index);
            }
            else {
                GameManager_1.default.I.curRubbisCount--;
                if (this.prop.configData.index == 9) {
                    // 捡到了旗帜
                    GGJPlayScene3D_1.default.I.boat.flag.active = true;
                    GGJPlayScene3D_1.default.I.boat.onSpeedUp(10, 5000);
                }
                GameManager_1.default.I.curRubbishCount++;
            }
            this.entity.onDestory();
        }
    }
    onDestory() {
        this.collisionScript && this.collisionScript.onDestroy();
        this.collisionScript = null;
        super.onDestory();
    }
    onEnable() {
        super.onEnable();
    }
    onDisable() {
        super.onDisable();
    }
}
exports.PropCollisionComp = PropCollisionComp;

},{"../../core/BaseComponent":3,"../../core/BindEntityScript":9,"../../core/EventManager":10,"../../core/TriggerCollisionScript3d":15,"../GameManager":36,"../scene/GGJPlayScene3D":60,"../view/GGJGameView":67}],43:[function(require,module,exports){
"use strict";
/**
 * 角色动画
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAnimComp = void 0;
const BaseComponent_1 = require("../../core/BaseComponent");
const LogicScheduler_1 = require("../../core/LogicScheduler");
class RoleAnimComp extends BaseComponent_1.default {
    onLoad() {
        super.onLoad();
    }
    init(animator) {
        this.animator = animator;
        animator.getDefaultState();
        this.animator.getControllerLayer();
    }
    getClipDuration(clipName) {
        let control = this.animator.getControllerLayer();
        let state = control.getAnimatorState(clipName);
        return state.clip.duration();
    }
    play(clipName, config = {}) {
        let control = this.animator.getControllerLayer();
        let state = control.getAnimatorState(clipName);
        if (!state) {
            return;
        }
        LogicScheduler_1.default.clearAll(this);
        if (config.speed != undefined) {
            this.animator.speed = config.speed;
        }
        else {
            this.animator.speed = 1;
        }
        if (config.loop != undefined) {
            state.clip.islooping = config.loop;
        }
        this.curConfig = config;
        if (config.callFunc != undefined && config.caller != undefined) {
            LogicScheduler_1.default.once(state.clip.duration() * 2000 / this.animator.speed, this, this.animateCallFunc);
        }
        this.animator.play(clipName, 0, 0);
        // this.animator.crossFade(clipName, 0.3, 0);
    }
    animateCallFunc() {
        this.curConfig.callFunc.call(this.curConfig.caller, this.curConfig.callArgs);
    }
    onDestory() {
        Laya.timer.clearAll(this);
        this.curConfig = null;
        super.onDestory();
    }
    onEnable() {
        super.onEnable();
    }
    onDisable() {
        super.onDisable();
    }
}
exports.RoleAnimComp = RoleAnimComp;

},{"../../core/BaseComponent":3,"../../core/LogicScheduler":13}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleControlComp = void 0;
const BaseComponent_1 = require("../../core/BaseComponent");
class RoleControlComp extends BaseComponent_1.default {
    constructor() {
        super();
        this.zero = new Laya.Vector3(0, 0, 0);
        // 当前命令角度
        this._cmdAngle = null;
        // 波动速度
        this.waveSpeed = 0.005;
        this.waveLimit = 0.1;
        this.wave = 0;
        this.updateComp = true;
    }
    init(prefab, ...params) {
        this.prefab = prefab;
        this._logicPrefab = new Laya.Sprite3D();
        this.prefab.parent.addChild(this._logicPrefab);
        let localPosition = this.prefab.transform.localPosition;
        this._logicPrefab.transform.localPosition = this.prefab.transform.localPosition.clone();
        this._logicPrefab.transform.localRotationEuler = this.prefab.transform.localRotationEuler.clone();
        this.entity.model.setPosition(localPosition.x, localPosition.y, localPosition.z);
        this.character = this._logicPrefab.addComponent(Laya.CharacterController);
        // this.rigidBody = this.prefab.getComponent(Laya.Rigidbody3D);
    }
    update(detal) {
        this.wave += this.waveSpeed;
        if (Math.abs(this.wave) > this.waveLimit) {
            this.waveSpeed = this.waveSpeed * -1;
        }
        this.entity.model.setPositionDiv(null, 0.3 + this.wave, null);
        if (this._cmdAngle == null) {
            this.character.move(this.zero);
            let localPosition = this._logicPrefab.transform.localPosition;
            this.entity.model.setPositionDiv(localPosition.x, null, localPosition.z);
            let curRotation = this.entity.model.localRotationEuler;
            this.entity.model.setRotation(curRotation.x, curRotation.y, curRotation.z);
            return;
        }
        let speed = this.entity.model.speed;
        if (speed == undefined) {
            console.error("RoleControlComp Error: entity model not find speed property!");
        }
        let angularSpeed = this.entity.model.angularSpeed;
        if (angularSpeed == undefined) {
            console.error("RoleControlComp Error: entity model not find angularSpeed property!");
        }
        let curRotation = this.entity.model.localRotationEuler;
        let curPosition = this.entity.model.localPosition;
        let curAngle = curRotation.y;
        if (curAngle !== this._cmdAngle) {
            if (curAngle - this._cmdAngle < -180) {
                curAngle += 360;
            }
            if (curAngle - this._cmdAngle > 180) {
                curAngle -= 360;
            }
            if (curAngle > this._cmdAngle) {
                curAngle -= angularSpeed;
                curAngle = curAngle < this._cmdAngle ? this._cmdAngle : curAngle;
            }
            else {
                curAngle += angularSpeed;
                curAngle = curAngle > this._cmdAngle ? this._cmdAngle : curAngle;
            }
            this.entity.model.setRotation(curRotation.x, curAngle, curRotation.z);
        }
        else {
            this.entity.model.setRotation(curRotation.x, curRotation.y, curRotation.z);
        }
        let rad = curAngle * Math.PI / 180;
        let z = Math.cos(rad) * 0.05 * speed;
        let x = Math.sin(rad) * 0.05 * speed;
        this.character.move(new Laya.Vector3(x, 0, z));
        let pos = this._logicPrefab.transform.localPosition;
        this.entity.model.setPositionDiv(pos.x, 0, pos.z);
    }
    onLoad() {
        super.onLoad();
    }
    onEnable() {
        super.onEnable();
    }
    onDestory() {
        super.onDestory();
        this._logicPrefab.destroy();
        this._logicPrefab = null;
    }
    onDisable() {
        super.onDisable();
    }
}
exports.RoleControlComp = RoleControlComp;

},{"../../core/BaseComponent":3}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropConfig = exports.PropConfigData = void 0;
const ResLoader_1 = require("../../core/util/ResLoader");
class PropConfigData {
    constructor(config) {
        this._index = config['index'];
        this._name = config['name'];
        this._res = config['res'];
        this._res3d = config['res3d'];
        this._health = config['health'];
        this._isFurit = config['isFurit'];
    }
    get index() {
        return this._index;
    }
    get name() {
        return this._name;
    }
    get res() {
        return this._res;
    }
    get res3d() {
        return this._res3d;
    }
    get health() {
        return this._health;
    }
    get isFurit() {
        return this._isFurit;
    }
}
exports.PropConfigData = PropConfigData;
class PropConfig {
    static deserialize() {
        let json = ResLoader_1.default.getRes(PropConfig.resPath);
        let dataArr = [];
        let keys = Object.keys(json);
        let data;
        let config;
        for (let i = 0, len = keys.length; i < len; i++) {
            config = json[keys[i]];
            data = new PropConfigData(config);
            dataArr.push(data);
        }
        return dataArr;
    }
}
exports.PropConfig = PropConfig;
PropConfig.resPath = "res/config/prop.json";

},{"../../core/util/ResLoader":24}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GameResDefine {
}
exports.default = GameResDefine;
GameResDefine.Home_fuj = "res/gui/Home.bin";
GameResDefine.Home_atlas0 = "res/gui/Home_atlas0.png";
GameResDefine.GGJGame_fuj = "res/gui/GGJGame.bin";
GameResDefine.GGJGame_atlas0 = "res/gui/GGJGame_atlas0.png";
GameResDefine.GGJGame_Scene = "res/3d/GGJScene.ls";
// 天空盒
GameResDefine.SkyBoxRes = "res/3d/skyBox/skyBox1/skyBox.lmat";
// 船
GameResDefine.BoatRes = "res/3d/Boat.lh";
GameResDefine.Player = "res/3d/Player.lh";

},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResLoader_1 = require("../../core/util/ResLoader");
const SingletonManager_1 = require("../../core/util/SingletonManager");
const GameConfigData_1 = require("../common/GameConfigData");
const GameManager_1 = require("../GameManager");
const Furit_1 = require("../prefab/Furit");
class FuritHelper {
    constructor() {
        this.furitPool = new Map();
    }
    static get I() {
        return SingletonManager_1.SingletonManager.get(FuritHelper);
    }
    static initFurit(type, furit) {
        FuritHelper.I.initFurit(type, furit);
    }
    initFurit(type, furit) {
        let curfurit = furit;
        furit.visible = false;
        furit.active = false;
        this.furitPool.set(type, furit);
    }
    static createFurit(type, pos = null) {
        return FuritHelper.I.createFurit(type, pos);
    }
    createFurit(type, pos = null) {
        let furitRes = new Laya.Prefab();
        furitRes.json = ResLoader_1.default.getRes(`common/Furit${type}.json`);
        let furitpre = Laya.Pool.getItemByCreateFun(`Furit${type}`, furitRes.create, furitRes);
        GameManager_1.default.I.gameViewPanel.addChild(furitpre);
        let furit = new Furit_1.default();
        furit.init(furitpre, type, pos);
        furit.onAwake();
        return furit;
    }
    createGGJFurit(type, pos = null) {
        let furitRes = new Laya.Prefab();
        let configData = GameConfigData_1.default.Ins.getPropConfigData(type);
        let res = configData.res;
        furitRes.json = ResLoader_1.default.getRes(res);
        let furitpre = Laya.Pool.getItemByCreateFun(`Furit${type}`, furitRes.create, furitRes);
        GameManager_1.default.I.ggjGameView.bagView.view.addChild(furitpre);
        let furit = new Furit_1.default();
        furit.init(furitpre, type, pos);
        furit.onAwake();
        return furit;
    }
    createJuice(type, pos = null) {
        let juiceRes = new Laya.Prefab();
        juiceRes.json = ResLoader_1.default.getRes(`common/Boom.json`);
        let juiceRespre = Laya.Pool.getItemByCreateFun(`Boom`, juiceRes.create, juiceRes);
        GameManager_1.default.I.gameViewPanel.addChild(juiceRespre);
        return juiceRespre;
    }
}
exports.default = FuritHelper;

},{"../../core/util/ResLoader":24,"../../core/util/SingletonManager":25,"../GameManager":36,"../common/GameConfigData":38,"../prefab/Furit":55}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SingletonManager_1 = require("../../core/util/SingletonManager");
const GameManager_1 = require("../GameManager");
const Prop_1 = require("../prefab/Prop");
class PropHelper {
    constructor() {
        this.furitArray = [1, 2, 7, 11, 12, 13, 14, 16, 18];
        this.rubbishArray = [4, 5, 6, 8, 9, 15, 17, 19];
    }
    static get I() {
        return SingletonManager_1.SingletonManager.get(PropHelper);
    }
    static createPropFurit(type, pos = null) {
        return PropHelper.I.createPropFurit(type, pos);
    }
    createPropFurit(type, pos = null) {
        let furit = new Prop_1.default();
        furit.init(type, pos);
        furit.onAwake();
        GameManager_1.default.I.curFuritCount++;
        return furit;
    }
    createPropRubbish(type, pos = null) {
        let rubbish = new Prop_1.default();
        rubbish.init(type, pos);
        rubbish.onAwake();
        GameManager_1.default.I.curRubbisCount++;
        return rubbish;
    }
}
exports.default = PropHelper;

},{"../../core/util/SingletonManager":25,"../GameManager":36,"../prefab/Prop":57}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RoleModel_1 = require("./RoleModel");
class BoatModel extends RoleModel_1.default {
    setPositionDiv(x = null, y = null, z = null) {
        this._localPosition.setValue(x || this._localPosition.x, y || this._localPosition.y, z || this._localPosition.z);
        this._owner.prefab.transform.localPosition = this.localPosition;
    }
    enableMove() {
        return true;
    }
    onDestory() {
        this._owner = null;
        super.onDestory();
    }
}
exports.default = BoatModel;

},{"./RoleModel":53}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../../core/BaseModel");
class FuritModel extends BaseModel_1.default {
    constructor(furitType) {
        super();
        this._furitType = furitType;
    }
    get furitType() {
        return this._furitType;
    }
    onDestory() {
        this._owner = null;
        super.onDestory();
    }
}
exports.default = FuritModel;

},{"../../core/BaseModel":6}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../../core/BaseModel");
class PlayerModel extends BaseModel_1.default {
    constructor() {
        super();
    }
    setPosition(x, y, z) {
        super.setPosition(x, y, z);
        this._owner.prefab.transform.localPosition = this.localPosition;
    }
    setRotation(x, y, z) {
        super.setRotation(x, y, z);
        this._owner.prefab.transform.localRotationEulerX = x;
        this._owner.prefab.transform.localRotationEulerY = y;
        this._owner.prefab.transform.localRotationEulerZ = z;
    }
    onDestory() {
        this._owner = null;
        super.onDestory();
    }
}
exports.default = PlayerModel;

},{"../../core/BaseModel":6}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropType = void 0;
const BaseModel_1 = require("../../core/BaseModel");
var PropType;
(function (PropType) {
    PropType["Apple"] = "Apple";
})(PropType = exports.PropType || (exports.PropType = {}));
class PropModel extends BaseModel_1.default {
    setPositionDiv(x = null, y = null, z = null) {
        this._localPosition.setValue(x || this._localPosition.x, y || this._localPosition.y, z || this._localPosition.z);
        this._owner.prefab.transform.localPosition = this.localPosition;
    }
    setPosition(x, y, z) {
        super.setPosition(x, y, z);
        this._owner.prefab.transform.localPosition = this.localPosition;
    }
    setRotation(x, y, z) {
        super.setRotation(x, y, z);
        this._owner.prefab.transform.localRotationEulerX = x;
        this._owner.prefab.transform.localRotationEulerY = y;
        this._owner.prefab.transform.localRotationEulerZ = z;
    }
    enableMove() {
        return true;
    }
    onDestory() {
        this._owner = null;
        super.onDestory();
    }
}
exports.default = PropModel;

},{"../../core/BaseModel":6}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleState = void 0;
const BaseModel_1 = require("../../core/BaseModel");
var RoleState;
(function (RoleState) {
    RoleState["None"] = "None";
    RoleState["Idle"] = "Idle";
    RoleState["Walk"] = "Run";
    RoleState["Run"] = "Run";
    RoleState["Damage"] = "m_damage";
    RoleState["Push"] = "Push";
    RoleState["Attack"] = "Attack";
    RoleState["Wanting"] = "Wanting";
})(RoleState = exports.RoleState || (exports.RoleState = {}));
class RoleModel extends BaseModel_1.default {
    constructor() {
        super();
        this._speed = 1; // 基础速度标量值
        this._angularSpeed = 0.5;
    }
    init(owner) {
        super.init(owner);
    }
    set speed(value) {
        this._speed = value;
    }
    get speed() {
        return this._speed;
    }
    get angularSpeed() {
        return this._angularSpeed;
    }
    set angularSpeed(value) {
        this._angularSpeed = value;
    }
    set state(v) {
        this._state = v;
    }
    get state() {
        return this._state;
    }
    setPosition(x, y, z) {
        super.setPosition(x, y, z);
        this._owner.prefab.transform.localPosition = this.localPosition;
    }
    setRotation(x, y, z) {
        super.setRotation(x, y, z);
        this._owner.prefab.transform.localRotationEulerX = x;
        this._owner.prefab.transform.localRotationEulerY = y;
        this._owner.prefab.transform.localRotationEulerZ = z;
    }
    onDestory() {
        this._owner = null;
        super.onDestory();
    }
}
exports.default = RoleModel;

},{"../../core/BaseModel":6}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BindEntityScript_1 = require("../../core/BindEntityScript");
const EntityTypeDefine_1 = require("../../core/util/EntityTypeDefine");
const ResLoader_1 = require("../../core/util/ResLoader");
const BoatCollisionComp_1 = require("../commponent/BoatCollisionComp");
const BoatControlComp_1 = require("../commponent/BoatControlComp");
const GameResDefine_1 = require("../define/GameResDefine");
const BoatModel_1 = require("../model/BoatModel");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
const Role_1 = require("./Role");
class Boat extends Role_1.default {
    constructor() {
        super();
        this._entityType = EntityTypeDefine_1.EntityType.Boat;
    }
    init(pos) {
        let res = GameResDefine_1.default.BoatRes;
        this.prefab = ResLoader_1.default.getRes(res).clone();
        this.flag = this.prefab.getChildAt(1);
        this.flag.active = false;
        GGJPlayScene3D_1.default.I.scene.addChild(this.prefab);
        this._model = new BoatModel_1.default();
        this._model.init(this);
        this._model.setPosition(pos.x, pos.y, pos.z);
        // 绑定脚本
        this.bindEntityScript = this.prefab.addComponent(BindEntityScript_1.default);
        this.bindEntityScript.setEntity(this);
        // 碰撞脚本
        this.collisionComp = this.addComponent(BoatCollisionComp_1.BoatCollisionComp);
        this.collisionComp.init(this.prefab);
        // 控制组件
        this.controlComp = this.addComponent(BoatControlComp_1.BoatControlComp);
        this.controlComp.init(this.prefab);
    }
    resetPos(x, y, z) {
        this.model.setRotation(x, y, z);
        this.controlComp.resetPos();
    }
    onSpeedUp(speed, time) {
        this.model.speed = speed;
        Laya.timer.clear(this, this.resetSpeed);
        Laya.timer.once(time, this, this.resetSpeed);
    }
    resetSpeed() {
        this.model.speed = 0.5;
    }
    addPlayer(player) {
        this.prefab.addChild(player.prefab);
    }
    get model() {
        return this._model;
    }
    onDestory() {
        Laya.Tween.clearAll(this);
        this.bindEntityScript.destroy();
        this.bindEntityScript = null;
        this.collisionComp.destoryScript();
        this.collisionComp = null;
        this.controlComp = null;
        this.prefab.removeSelf();
        this.prefab.destroy();
        this.prefab = null;
        this._model = null;
        super.onDestory();
    }
}
exports.default = Boat;

},{"../../core/BindEntityScript":9,"../../core/util/EntityTypeDefine":20,"../../core/util/ResLoader":24,"../commponent/BoatCollisionComp":40,"../commponent/BoatControlComp":41,"../define/GameResDefine":46,"../model/BoatModel":49,"../scene/GGJPlayScene3D":60,"./Role":58}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseEntity_1 = require("../../core/BaseEntity");
const EntityTypeDefine_1 = require("../../core/util/EntityTypeDefine");
const FuritModel_1 = require("../model/FuritModel");
class Furit extends BaseEntity_1.default {
    constructor() {
        super();
        this._entityType = EntityTypeDefine_1.EntityType.Furit;
        this.isAnimation = false;
        this.isReady = true;
    }
    init(prefab, furitType, pos) {
        this.prefab = prefab;
        this.prefab.x = pos.x;
        this.prefab.y = pos.y;
        this._model = new FuritModel_1.default(furitType);
        this._model.init(this);
        this.rigidBody = this.prefab.getComponent(Laya.RigidBody);
        this.collider = this.prefab.getComponent(Laya.ColliderBase);
        // 初始化刚体
        this.rigidBody.allowSleep = false;
        this.collider.density = 1;
        this.collider.restitution = 0.2;
        this.rigidBody.linearDamping = 0.1;
        // 绑定脚本
        // this.bindEntityScript = this.prefab.addComponent(BindEntityScript);
        // this.bindEntityScript.setEntity(this);
        // 碰撞脚本
        // this.furitCollisionComp = this.addComponent(FuritCollisionComp);
        // this.furitCollisionComp.init(this.prefab);
    }
    get model() {
        return this._model;
    }
    scaleTween() {
        this.prefab.scale(0.1, 0.1);
        Laya.Tween.to(this.prefab, {
            scaleX: 1,
            scaleY: 1,
            ease: Laya.Ease.backOut
        }, 300, null, Laya.Handler.create(this, this.endAnimation), null, true);
    }
    showIn() {
        this.isReady = false;
        this.scaleTween();
        this.isAnimation = true;
        this.rigidBody.gravityScale = 0;
    }
    endAnimation() {
        this.isAnimation = false;
        this.isReady = true;
    }
    run() {
        this.rigidBody.gravityScale = 4;
    }
    // 主动爆炸
    boom() {
        this.onDestory();
    }
    // 被动爆炸
    beBoom() {
        this.onDestory();
    }
    onDestory() {
        this.prefab.scale(1, 1);
        Laya.Tween.clearAll(this);
        this.bindEntityScript.destroy();
        this.bindEntityScript = null;
        this.furitCollisionComp.destoryScript();
        this.furitCollisionComp = null;
        this.prefab.removeSelf();
        Laya.Pool.recover(`Furit${this._model.furitType}`, this.prefab);
        this.prefab = null;
        this._model = null;
        this.rigidBody = null;
        super.onDestory();
    }
}
exports.default = Furit;

},{"../../core/BaseEntity":4,"../../core/util/EntityTypeDefine":20,"../model/FuritModel":50}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseEntity_1 = require("../../core/BaseEntity");
const EntityTypeDefine_1 = require("../../core/util/EntityTypeDefine");
const ResLoader_1 = require("../../core/util/ResLoader");
const RoleAnimComp_1 = require("../commponent/RoleAnimComp");
const GameResDefine_1 = require("../define/GameResDefine");
const PlayerModel_1 = require("../model/PlayerModel");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
class Player extends BaseEntity_1.default {
    constructor() {
        super();
        this._entityType = EntityTypeDefine_1.EntityType.Player;
    }
    init(pos) {
        let res = GameResDefine_1.default.Player;
        this.prefab = ResLoader_1.default.getRes(res).clone();
        GGJPlayScene3D_1.default.I.boat.addPlayer(this);
        this._model = new PlayerModel_1.default();
        this._model.init(this);
        this._model.setPosition(pos.x, pos.y, pos.z);
        // 动画组件
        let anim = this.prefab.getChildAt(0).getComponent(Laya.Animator);
        this.animComp = this.addComponent(RoleAnimComp_1.RoleAnimComp);
        this.animComp.init(anim);
        this.idle();
    }
    idle() {
        this.animComp.play("idle", { loop: true });
    }
    get model() {
        return this._model;
    }
    onDestory() {
        this.prefab.removeSelf();
        this.prefab.destroy();
        this.prefab = null;
        this._model = null;
        super.onDestory();
    }
}
exports.default = Player;

},{"../../core/BaseEntity":4,"../../core/util/EntityTypeDefine":20,"../../core/util/ResLoader":24,"../commponent/RoleAnimComp":43,"../define/GameResDefine":46,"../model/PlayerModel":51,"../scene/GGJPlayScene3D":60}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseEntity_1 = require("../../core/BaseEntity");
const BindEntityScript_1 = require("../../core/BindEntityScript");
const EntityTypeDefine_1 = require("../../core/util/EntityTypeDefine");
const ResLoader_1 = require("../../core/util/ResLoader");
const GameConfigData_1 = require("../common/GameConfigData");
const PropCollisionComp_1 = require("../commponent/PropCollisionComp");
const PropModel_1 = require("../model/PropModel");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
class Prop extends BaseEntity_1.default {
    constructor() {
        super();
        this._entityType = EntityTypeDefine_1.EntityType.Prop;
    }
    init(propType, pos) {
        this.configData = GameConfigData_1.default.Ins.getPropConfigData(propType);
        let res = this.configData.res3d;
        this.prefab = ResLoader_1.default.getRes(res).clone();
        GGJPlayScene3D_1.default.I.scene.addChild(this.prefab);
        this._model = new PropModel_1.default();
        this._model.init(this);
        this._model.propType = propType;
        this._model.setPosition(pos.x, pos.y, pos.z);
        // 绑定脚本
        this.bindEntityScript = this.prefab.addComponent(BindEntityScript_1.default);
        this.bindEntityScript.setEntity(this);
        // 碰撞脚本
        this.collisionComp = this.addComponent(PropCollisionComp_1.PropCollisionComp);
        this.collisionComp.init(this.prefab);
    }
    get model() {
        return this._model;
    }
    onDestory() {
        Laya.Tween.clearAll(this);
        this.bindEntityScript.destroy();
        this.bindEntityScript = null;
        this.collisionComp.destoryScript();
        this.collisionComp = null;
        this.prefab.removeSelf();
        this.prefab.destroy();
        this.prefab = null;
        this._model = null;
        super.onDestory();
    }
}
exports.default = Prop;

},{"../../core/BaseEntity":4,"../../core/BindEntityScript":9,"../../core/util/EntityTypeDefine":20,"../../core/util/ResLoader":24,"../common/GameConfigData":38,"../commponent/PropCollisionComp":42,"../model/PropModel":52,"../scene/GGJPlayScene3D":60}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleEvent = void 0;
const BaseEntity_1 = require("../../core/BaseEntity");
const RoleModel_1 = require("../model/RoleModel");
var RoleEvent;
(function (RoleEvent) {
    RoleEvent["State"] = "State";
})(RoleEvent = exports.RoleEvent || (exports.RoleEvent = {}));
class Role extends BaseEntity_1.default {
    constructor() {
        super();
    }
    lockOnTarget() {
    }
    run() {
        if (this._model.state != RoleModel_1.RoleState.Run) {
            this._model.state = RoleModel_1.RoleState.Run;
            //this.animComp.play(RoleState.Run, {loop: true});
        }
    }
    walk() {
        if (this._model.state != RoleModel_1.RoleState.Walk) {
            this._model.state = RoleModel_1.RoleState.Walk;
            //this.animComp.play(RoleState.Walk, {loop: true});
        }
    }
    idle() {
        if (this._model.state != RoleModel_1.RoleState.Idle) {
            this._model.state = RoleModel_1.RoleState.Idle;
            //this.animComp.play(RoleState.Idle, {loop: true});
        }
    }
    damage() {
        if (this._model.state != RoleModel_1.RoleState.Damage) {
            this._model.state = RoleModel_1.RoleState.Damage;
            //this.animComp.play(RoleState.Damage);
        }
    }
    resetIdle() {
        this.idle();
    }
    resetRun() {
        this.run();
    }
    get model() {
        return this._model;
    }
    onDestory() {
        super.onDestory();
        this.model && this.model.onDestory();
        this._model = null;
        this.prefab.destroy();
    }
}
exports.default = Role;

},{"../../core/BaseEntity":4,"../model/RoleModel":53}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseScene_1 = require("../../core/BaseScene");
const GameResDefine_1 = require("../define/GameResDefine");
const ViewManager_1 = require("../../core/ViewManager");
const GGJGameView_1 = require("../view/GGJGameView");
const GGJGameBinder_1 = require("../../fui/GGJGame/GGJGameBinder");
class GGJGameScene extends BaseScene_1.default {
    dependAssets() {
        let assets = [
            "res/other/sea.png",
            "res/other/noise.jpg",
            "res/atlas/ui/ggj.png",
            "res/atlas/ui/ggj.atlas",
            "common/ggjfurit/Bag.json",
            "common/ggjfurit/f1.json",
            "common/ggjfurit/f2.json",
            "common/ggjfurit/f3.json",
            "common/ggjfurit/f4.json",
            "common/ggjfurit/f5.json",
            "common/ggjfurit/f6.json",
            "common/ggjfurit/f7.json",
            "common/ggjfurit/f8.json",
            "common/ggjfurit/f9.json",
            "res/3d/Apple.lh",
            "res/3d/Avocado.lh",
            "res/3d/Banana.lh",
            "res/3d/Barrel.lh",
            "res/3d/Bird.lh",
            "res/3d/Cauldron.lh",
            "res/3d/Cherries.lh",
            "res/3d/Cover.lh",
            "res/3d/Flag.lh",
            "res/3d/Land.lh",
            "res/3d/Lemon.lh",
            "res/3d/Peach.lh",
            "res/3d/Peanut.lh",
            "res/3d/Pear.lh",
            "res/3d/Skull.lh",
            "res/3d/Strawberry.lh",
            "res/3d/TreeRoot.lh",
            "res/3d/Watermelon.lh",
            "res/3d/Wood.lh",
            "res/other/Salve.wav",
            "res/other/bg.mp3",
            GameResDefine_1.default.GGJGame_fuj,
            GameResDefine_1.default.GGJGame_atlas0,
            GameResDefine_1.default.GGJGame_Scene,
            GameResDefine_1.default.SkyBoxRes,
            GameResDefine_1.default.BoatRes,
            GameResDefine_1.default.Player,
        ];
        return assets;
    }
    onLoad() {
        this._scene = new Laya.Scene3D();
        Laya.stage.addChild(this._scene);
        // 资源包
        fgui.UIPackage.addPackage("res/gui/GGJGame");
        GGJGameBinder_1.default.bindAll();
        Laya.SoundManager.playMusic("res/other/bg.mp3");
        ViewManager_1.default.addView(GGJGameView_1.default);
    }
}
exports.default = GGJGameScene;

},{"../../core/BaseScene":7,"../../core/ViewManager":16,"../../fui/GGJGame/GGJGameBinder":29,"../define/GameResDefine":46,"../view/GGJGameView":67}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResLoader_1 = require("../../core/util/ResLoader");
const SingletonManager_1 = require("../../core/util/SingletonManager");
const GameCamera_1 = require("../common/GameCamera");
const GameResDefine_1 = require("../define/GameResDefine");
const GameManager_1 = require("../GameManager");
const PropHelper_1 = require("../helper/PropHelper");
const Boat_1 = require("../prefab/Boat");
const Player_1 = require("../prefab/Player");
const Prop_1 = require("../prefab/Prop");
const SeaMaterial_1 = require("../shader/SeaMaterial");
class GGJPlayScene3D {
    constructor() {
        this.exposureNumber = 0;
    }
    static get I() {
        return SingletonManager_1.SingletonManager.get(GGJPlayScene3D);
    }
    init() {
        this.scene = ResLoader_1.default.getRes(GameResDefine_1.default.GGJGame_Scene);
        Laya.stage.addChild(this.scene);
        //添加照相机
        this.gameCamera = new GameCamera_1.default();
        this.scene.addChild(this.gameCamera);
        this.sea = this.scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(200, 1, 200)));
        this.sea.transform.localPosition = new Laya.Vector3(0, 0, 0);
        this.sea.transform.localScale = new Laya.Vector3(1, 1, 1);
        this.sea2 = this.scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(200, 1, 200)));
        this.sea2.transform.localPosition = new Laya.Vector3(0, 0, 200);
        this.sea2.transform.localScale = new Laya.Vector3(1, 1, 1);
        // let tween = Laya.Tween.to(this.sea.transform,{localRotationEulerX:359},10000);
        // 海浪
        SeaMaterial_1.default.initShader();
        let mat = new SeaMaterial_1.default();
        Laya.Texture2D.load("res/other/sea.png", Laya.Handler.create(null, function (tex) {
            mat.albedoTexture = tex;
        }));
        Laya.Texture2D.load("res/other/noise.jpg", Laya.Handler.create(null, function (tex) {
            mat.noiseTex = tex;
            let tex1 = tex;
            tex1.bitmap.wrapModeU = 0;
            tex1.bitmap.wrapModeV = 0;
        }));
        this.sea.meshRenderer.material = mat;
        this.sea2.meshRenderer.material = mat;
        mat.specularColor = new Laya.Vector4(0.1, 0, 0.6, 1);
        mat.shininess = 100;
        mat.waterScale = 0.6;
        // 场景雾dwd
        this.scene.enableFog = true;
        this.scene.fogColor = new Laya.Vector3(0.7, 0.7, 0.7);
        this.scene.fogStart = 0;
        this.scene.fogRange = 100;
        // 添加天空盒
        this.loadSkyBox();
        // 加船
        this.boat = new Boat_1.default();
        this.boat.init(new Laya.Vector3(-1.5, 0.5, -10));
        this.boat.onAwake();
        // 加人
        this.player = new Player_1.default();
        this.player.init(new Laya.Vector3(0.81, 0.5, 0.64));
        this.player.onAwake();
        // 加大陆
        this.land = new Prop_1.default();
        this.land.init(10, new Laya.Vector3(0.81, 0.5, 200));
        // 水果生成器
        Laya.timer.loop(2000, this, this.onFuritLoop);
        // 垃圾生成器
        Laya.timer.loop(3000, this, this.onRubbishLoop);
    }
    // 重新开始
    reStart() {
        GameManager_1.default.I.isOver = false;
        this.boat.resetPos(-1.5, 0.5, -10);
        GameManager_1.default.I.ggjGameView.startGame();
    }
    onFuritLoop() {
        if (GameManager_1.default.I.curFuritCount >= GameManager_1.default.I.furitMax) {
            return;
        }
        let len = PropHelper_1.default.I.furitArray.length;
        let index = PropHelper_1.default.I.furitArray[Math.floor(Math.random() * len)];
        let curPos = new Laya.Vector3();
        let pos = this.boat.model.localPosition;
        curPos.x = pos.x + (Math.random() - 0.5) * 35;
        curPos.z = pos.z + 30 + Math.random() * 10;
        PropHelper_1.default.I.createPropFurit(index, curPos);
    }
    onRubbishLoop() {
        if (GameManager_1.default.I.curRubbishCount >= GameManager_1.default.I.rubbisMax) {
            return;
        }
        let len = PropHelper_1.default.I.rubbishArray.length;
        let index = PropHelper_1.default.I.rubbishArray[Math.floor(Math.random() * len)];
        let curPos = new Laya.Vector3();
        let pos = this.boat.model.localPosition;
        curPos.x = pos.x + (Math.random() - 0.5) * 35;
        curPos.z = pos.z + 40 + Math.random() * 10;
        PropHelper_1.default.I.createPropRubbish(index, curPos);
    }
    loadSkyBox() {
        let mat = ResLoader_1.default.getRes(GameResDefine_1.default.SkyBoxRes);
        let skyRenderer = this.scene.skyRenderer;
        skyRenderer.mesh = Laya.SkyBox.instance;
        skyRenderer.material = mat;
        this.gameCamera.camera.clearFlag = Laya.BaseCamera.CLEARFLAG_SKY;
        Laya.timer.frameLoop(1, this, this.onFrameLoop);
    }
    onFrameLoop() {
        let material = this.scene.skyRenderer.material;
        // material.exposure = 0.3 * Math.sin(this.exposureNumber += 0.01) + 1;
        material.rotation += 0.005;
    }
}
exports.default = GGJPlayScene3D;

},{"../../core/util/ResLoader":24,"../../core/util/SingletonManager":25,"../GameManager":36,"../common/GameCamera":37,"../define/GameResDefine":46,"../helper/PropHelper":48,"../prefab/Boat":54,"../prefab/Player":56,"../prefab/Prop":57,"../shader/SeaMaterial":62}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 使用isFairyGui的load页面
 */
const BaseLoadScene_1 = require("../../core/BaseLoadScene");
const ViewManager_1 = require("../../core/ViewManager");
const LoadingView_1 = require("../view/LoadingView");
const CommonBinder_1 = require("../../fui/Common/CommonBinder");
class LoadingScene extends BaseLoadScene_1.default {
    dependAssets() {
        let assets = [
            "res/gui/Common_atlas0.png",
            "res/gui/Common.bin"
        ];
        return assets;
    }
    onLoad() {
        this._scene = new Laya.Scene();
        Laya.stage.addChild(this._scene);
        fgui.UIPackage.addPackage("res/gui/Common");
        CommonBinder_1.default.bindAll();
        this._loadingView = ViewManager_1.default.addLoadingView(LoadingView_1.default);
        this._loadingView.view.displayObject.zOrder = ViewManager_1.ViewOrder.High;
    }
    show() {
        super.show();
        this._loadingView.show();
    }
    hide() {
        super.hide();
        this._loadingView.hide();
    }
    onProgress(value) {
        this._loadingView.setProgress(value);
    }
    onComplete() {
        this._loadingView.setProgress(1);
        super.onComplete();
        this.hide();
    }
    onDestory() {
        super.onDestory();
        this._loadingView.removeSelf();
    }
}
exports.default = LoadingScene;

},{"../../core/BaseLoadScene":5,"../../core/ViewManager":16,"../../fui/Common/CommonBinder":26,"../view/LoadingView":69}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SeaShaderFs_1 = require("./SeaShaderFs");
const SeaShaderVs_1 = require("./SeaShaderVs");
var Shader3D = Laya.Shader3D;
var SubShader = Laya.SubShader;
var VertexMesh = Laya.VertexMesh;
class SeaMaterial extends Laya.Material {
    constructor() {
        super();
        this.setShaderName("SeaMaterial");
        // case BlinnPhongMaterial.RENDERMODE_OPAQUE:
        // this.alphaTest = false;
        // this.renderQueue = Material.RENDERQUEUE_OPAQUE;
        // this.depthWrite = true;
        // this.cull = RenderState.CULL_BACK;
        // this.blend = RenderState.BLEND_DISABLE;
        // this.depthTest = RenderState.DEPTHTEST_LESS;
        // break;
        // case BlinnPhongMaterial.RENDERMODE_CUTOUT:
        //     this.renderQueue = Material.RENDERQUEUE_ALPHATEST;
        //     this.alphaTest = true;
        //     this.depthWrite = true;
        //     this.cull = RenderState.CULL_BACK;
        //     this.blend = RenderState.BLEND_DISABLE;
        //     this.depthTest = RenderState.DEPTHTEST_LESS;
        //     break;
        // case BlinnPhongMaterial.RENDERMODE_TRANSPARENT:
        //     this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;
        //     this.alphaTest = false;
        //     this.depthWrite = false;
        //     this.cull = RenderState.CULL_BACK;
        //     this.blend = RenderState.BLEND_ENABLE_ALL;
        //     this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;
        //     this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;
        //     this.depthTest = RenderState.DEPTHTEST_LESS;
        // case BlinnPhongMaterial.RENDERMODE_TRANSPARENT:
        // 透明混合的渲染队列设置
        this.renderQueue = Laya.BaseMaterial.RENDERQUEUE_TRANSPARENT;
        this.alphaTest = false;
        this._shaderValues.setBool(SeaMaterial.DEPTH_WRITE, true);
        this._shaderValues.setInt(SeaMaterial.CULL, Laya.RenderState.CULL_BACK);
        this._shaderValues.setInt(SeaMaterial.BLEND, Laya.RenderState.BLEND_ENABLE_ALL);
        this._shaderValues.setInt(SeaMaterial.BLEND_SRC, Laya.RenderState.BLENDPARAM_SRC_ALPHA);
        this._shaderValues.setInt(SeaMaterial.BLEND_DST, Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA);
        this._shaderValues.setInt(SeaMaterial.DEPTH_TEST, Laya.RenderState.DEPTHTEST_LESS);
    }
    static initShader() {
        // 直接粘贴过来的，不知道laya有哪些内置变量，多余没用的先放着，用的时候好查。
        //BLINNPHONG
        var attributeMap = {
            'a_Position': VertexMesh.MESH_POSITION0,
            'a_Color': VertexMesh.MESH_COLOR0,
            'a_Normal': VertexMesh.MESH_NORMAL0,
            'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,
            'a_Texcoord1': VertexMesh.MESH_TEXTURECOORDINATE1,
            'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,
            'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,
            'a_Tangent0': VertexMesh.MESH_TANGENT0,
            'a_WorldMat': VertexMesh.MESH_WORLDMATRIX_ROW0
        };
        var uniformMap = {
            'u_Bones': Shader3D.PERIOD_CUSTOM,
            'u_DiffuseTexture': Shader3D.PERIOD_MATERIAL,
            'u_NoiseTex': Shader3D.PERIOD_MATERIAL,
            'u_SpecularTexture': Shader3D.PERIOD_MATERIAL,
            'u_NormalTexture': Shader3D.PERIOD_MATERIAL,
            'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,
            'u_DiffuseColor': Shader3D.PERIOD_MATERIAL,
            'u_MaterialSpecular': Shader3D.PERIOD_MATERIAL,
            'u_Shininess': Shader3D.PERIOD_MATERIAL,
            'u_WaterScale': Shader3D.PERIOD_MATERIAL,
            'u_TilingOffset': Shader3D.PERIOD_MATERIAL,
            'u_WorldMat': Shader3D.PERIOD_SPRITE,
            'u_MvpMatrix': Shader3D.PERIOD_SPRITE,
            'u_LightmapScaleOffset': Shader3D.PERIOD_SPRITE,
            'u_LightMap': Shader3D.PERIOD_SPRITE,
            'u_LightMapDirection': Shader3D.PERIOD_SPRITE,
            'u_SimpleAnimatorTexture': Shader3D.PERIOD_SPRITE,
            'u_SimpleAnimatorParams': Shader3D.PERIOD_SPRITE,
            'u_SimpleAnimatorTextureSize': Shader3D.PERIOD_SPRITE,
            'u_CameraPos': Shader3D.PERIOD_CAMERA,
            'u_Viewport': Shader3D.PERIOD_CAMERA,
            'u_ProjectionParams': Shader3D.PERIOD_CAMERA,
            'u_View': Shader3D.PERIOD_CAMERA,
            'u_ViewProjection': Shader3D.PERIOD_CAMERA,
            'u_ReflectTexture': Shader3D.PERIOD_SCENE,
            'u_ReflectIntensity': Shader3D.PERIOD_SCENE,
            'u_FogStart': Shader3D.PERIOD_SCENE,
            'u_FogRange': Shader3D.PERIOD_SCENE,
            'u_FogColor': Shader3D.PERIOD_SCENE,
            'u_DirationLightCount': Shader3D.PERIOD_SCENE,
            'u_LightBuffer': Shader3D.PERIOD_SCENE,
            'u_LightClusterBuffer': Shader3D.PERIOD_SCENE,
            'u_AmbientColor': Shader3D.PERIOD_SCENE,
            'u_ShadowBias': Shader3D.PERIOD_SCENE,
            'u_ShadowLightDirection': Shader3D.PERIOD_SCENE,
            'u_ShadowMap': Shader3D.PERIOD_SCENE,
            'u_ShadowParams': Shader3D.PERIOD_SCENE,
            'u_ShadowSplitSpheres': Shader3D.PERIOD_SCENE,
            'u_ShadowMatrices': Shader3D.PERIOD_SCENE,
            'u_ShadowMapSize': Shader3D.PERIOD_SCENE,
            'u_SpotShadowMap': Shader3D.PERIOD_SCENE,
            'u_SpotViewProjectMatrix': Shader3D.PERIOD_SCENE,
            'u_ShadowLightPosition': Shader3D.PERIOD_SCENE,
            //GI
            'u_AmbientSHAr': Shader3D.PERIOD_SCENE,
            'u_AmbientSHAg': Shader3D.PERIOD_SCENE,
            'u_AmbientSHAb': Shader3D.PERIOD_SCENE,
            'u_AmbientSHBr': Shader3D.PERIOD_SCENE,
            'u_AmbientSHBg': Shader3D.PERIOD_SCENE,
            'u_AmbientSHBb': Shader3D.PERIOD_SCENE,
            'u_AmbientSHC': Shader3D.PERIOD_SCENE,
            //legacy lighting
            'u_DirectionLight.color': Shader3D.PERIOD_SCENE,
            'u_DirectionLight.direction': Shader3D.PERIOD_SCENE,
            'u_PointLight.position': Shader3D.PERIOD_SCENE,
            'u_PointLight.range': Shader3D.PERIOD_SCENE,
            'u_PointLight.color': Shader3D.PERIOD_SCENE,
            'u_SpotLight.position': Shader3D.PERIOD_SCENE,
            'u_SpotLight.direction': Shader3D.PERIOD_SCENE,
            'u_SpotLight.range': Shader3D.PERIOD_SCENE,
            'u_SpotLight.spot': Shader3D.PERIOD_SCENE,
            'u_SpotLight.color': Shader3D.PERIOD_SCENE,
            'u_Time': Shader3D.PERIOD_SCENE,
        };
        var stateMap = {
            's_Cull': Shader3D.RENDER_STATE_CULL,
            's_Blend': Shader3D.RENDER_STATE_BLEND,
            's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,
            's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,
            's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,
            's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE
        };
        var shader = Shader3D.add("SeaMaterial", null, null, true);
        var subShader = new SubShader(attributeMap, uniformMap);
        shader.addSubShader(subShader);
        subShader.addShaderPass(SeaShaderVs_1.SeaShaderVs, SeaShaderFs_1.SeaShaderFs, stateMap);
    }
    set albedoTexture(value) {
        this._shaderValues.setTexture(SeaMaterial.ALBEDOTEXTURE, value);
    }
    set noiseTex(value) {
        this._shaderValues.setTexture(SeaMaterial.NOISE_TEX, value);
    }
    get _SpecColor() {
        return this._shaderValues.getVector(SeaMaterial.MATERIALSPECULAR);
    }
    get specularColor() {
        return this._shaderValues.getVector(SeaMaterial.MATERIALSPECULAR);
    }
    set specularColor(value) {
        this._shaderValues.setVector(SeaMaterial.MATERIALSPECULAR, value);
    }
    set _SpecColor(value) {
        this.specularColor = value;
    }
    get _Shininess() {
        return this._shaderValues.getNumber(SeaMaterial.SHININESS);
    }
    set _Shininess(value) {
        value = Math.max(0.0, Math.min(1.0, value));
        this._shaderValues.setNumber(SeaMaterial.SHININESS, value);
    }
    get shininess() {
        return this._Shininess;
    }
    set shininess(value) {
        this._Shininess = value;
    }
    set waterScale(value) {
        this._shaderValues.setNumber(SeaMaterial.WATER_SCALE, value);
    }
}
exports.default = SeaMaterial;
SeaMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID("u_DiffuseTexture");
SeaMaterial.NOISE_TEX = Shader3D.propertyNameToID("u_NoiseTex");
SeaMaterial.CULL = Shader3D.propertyNameToID("s_Cull");
SeaMaterial.BLEND = Shader3D.propertyNameToID("s_Blend");
SeaMaterial.BLEND_SRC = Shader3D.propertyNameToID("s_BlendSrc");
SeaMaterial.BLEND_DST = Shader3D.propertyNameToID("s_BlendDst");
SeaMaterial.DEPTH_TEST = Shader3D.propertyNameToID("s_DepthTest");
SeaMaterial.DEPTH_WRITE = Shader3D.propertyNameToID("s_DepthWrite");
SeaMaterial.MATERIALSPECULAR = Shader3D.propertyNameToID("u_MaterialSpecular");
SeaMaterial.SHININESS = Shader3D.propertyNameToID("u_Shininess");
SeaMaterial.WATER_SCALE = Shader3D.propertyNameToID("u_WaterScale");

},{"./SeaShaderFs":63,"./SeaShaderVs":64}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeaShaderFs = void 0;
exports.SeaShaderFs = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float;
	precision highp int;
#else
	precision mediump float;
	precision mediump int;
#endif

#include "Lighting.glsl";
#include "GlobalIllumination.glsl";//"GlobalIllumination.glsl use uniform should at front of this

uniform sampler2D u_DiffuseTexture;
uniform sampler2D u_NoiseTex;

varying vec3 v_Normal;

// #if defined(DIRECTIONLIGHT)
varying vec3 v_ViewDir; 
uniform vec3 u_MaterialSpecular;
uniform float u_Shininess;

uniform mat4 u_View;
uniform vec4 u_ProjectionParams;
uniform vec4 u_Viewport;
uniform int u_DirationLightCount;
uniform sampler2D u_LightBuffer;
uniform sampler2D u_LightClusterBuffer;
uniform float u_Time;
uniform float u_WaterScale;

varying vec2 v_Texcoord0;

void main()
{
	vec3 normal = normalize(v_Normal);
	vec3 viewDir= normalize(v_ViewDir);
	LayaGIInput giInput;
	vec3 globalDiffuse=layaGIBase(giInput,1.0,normal);

	vec4 difTexColor=vec4(texture2D(u_DiffuseTexture, v_Texcoord0).rgb,0.6);
	vec4 mainColor=difTexColor;
	vec3 diffuse = vec3(0.0);
	vec3 specular= vec3(0.0);
	vec3 dif,spe;
	vec3 gloss=vec3(difTexColor.a);

	for (int i = 0; i < MAX_LIGHT_COUNT; i++) 
	{
		if(i >= u_DirationLightCount)
			break;
		DirectionLight directionLight = getDirectionLight(u_LightBuffer,i);
		LayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,directionLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	}
	
	// 水波相关代码 begin
	float _NoiseSpeedX = 0.02;
	float _NoiseSpeedY = 0.02;
	float _NoiseScaleX = u_WaterScale;
	float _NoiseScaleY = u_WaterScale;
	float _NoiseBrightOffset = 0.0;

	vec2 tuv1 = v_Texcoord0 + vec2(u_Time * _NoiseSpeedX,0);
	vec2 tuv2 = v_Texcoord0 + vec2(0,u_Time * _NoiseSpeedY);
	vec2 ouvxy = vec2(texture2D(u_NoiseTex,tuv1).r,texture2D(u_NoiseTex,tuv2).r);
	ouvxy -= _NoiseBrightOffset;
	ouvxy *= vec2(_NoiseScaleX, _NoiseScaleY);
	vec4 col = texture2D(u_DiffuseTexture,v_Texcoord0 + ouvxy);
	// 水波相关代码 end

	// 水波其他的都是光照的计算
	gl_FragColor =vec4(col.rgb*(globalDiffuse + diffuse),mainColor.a);
	gl_FragColor.rgb+=specular;
}
`;

},{}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeaShaderVs = void 0;
exports.SeaShaderVs = `
#include "Lighting.glsl";

attribute vec4 a_Position;

attribute vec2 a_Texcoord0;
varying vec2 v_Texcoord0;

uniform mat4 u_WorldMat;
uniform mat4 u_MvpMatrix;

attribute vec3 a_Normal;
varying vec3 v_Normal; 

uniform vec3 u_CameraPos;
varying vec3 v_ViewDir; 

void main()
{
	vec4 position=a_Position;

	mat4 worldMat = u_WorldMat;
	vec3 positionWS=(worldMat*position).xyz;
	v_ViewDir = u_CameraPos-positionWS;
	mat3 worldInvMat = INVERSE_MAT(mat3(worldMat));
	v_Normal=normalize(a_Normal*worldInvMat);

    gl_Position = u_MvpMatrix * position;
	gl_Position=remapGLPositionZ(gl_Position);
	v_Texcoord0 = a_Texcoord0;
}
`;

},{}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GuiBaseView_1 = require("../../core/GuiBaseView");
const layaMaxUI_1 = require("../../ui/layaMaxUI");
const GameManager_1 = require("../GameManager");
const FuritHelper_1 = require("../helper/FuritHelper");
class BagView extends GuiBaseView_1.default {
    constructor() {
        super();
        this.createCount = 0;
        this.isStartTouch = false;
        this.view = new layaMaxUI_1.ui.common.ggjfurit.BagUI();
    }
    onStart() {
        this.view.width = Laya.stage.width;
        this.view.height = Laya.stage.height;
        this.createCount = 0;
        this.birthPos = new Laya.Vector2(Laya.stage.width / 2, this.view.birthPos.y);
        this.view.closeBtn.on(Laya.Event.CLICK, this, this.onClose);
        this.addMouseEvent();
    }
    onClose() {
        // ViewManager.removeView(this);
        // LogicScheduler.Ins.resume()
        this.hide();
    }
    addFurit(type) {
        this.curfurit = FuritHelper_1.default.I.createGGJFurit(type, this.birthPos);
    }
    addMouseEvent() {
        // Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchStart);
        // Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMove);
        // Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd);
    }
    removeMouseEvent() {
        Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.onTouchStart);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMove);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onTouchEnd);
    }
    onTouchStart(event) {
        this.isStartTouch = true;
    }
    onTouchMove(event) {
        if (this.curfurit == null) {
            return;
        }
        if (this.curfurit.prefab == null) {
            this.curfurit = null;
            return;
        }
        if (this.isStartTouch == false) {
            return;
        }
        if (this.curfurit.isAnimation) {
            return;
        }
        let x = event.stageX;
        if (x - (this.curfurit.prefab.width / 2) <= 0) {
            this.curfurit.prefab.x = (this.curfurit.prefab.width / 2);
        }
        else if (x + (this.curfurit.prefab.width / 2) >= Laya.stage.width) {
            this.curfurit.prefab.x = Laya.stage.width - (this.curfurit.prefab.width / 2);
        }
        else {
            this.curfurit.prefab.x = x;
        }
    }
    onTouchEnd() {
        this.isStartTouch = false;
        if (this.curfurit == null) {
            return;
        }
        if (this.curfurit.prefab == null) {
            this.curfurit = null;
            return;
        }
        if (this.curfurit.isAnimation) {
            return;
        }
        this.curfurit.run();
        this.curfurit = null;
    }
    onDestory() {
        this.view.closeBtn.off(Laya.Event.CLICK, this, this.onClose);
        Laya.timer.clearAll(this);
        this.removeMouseEvent();
        GameManager_1.default.I.end();
    }
}
exports.default = BagView;

},{"../../core/GuiBaseView":12,"../../ui/layaMaxUI":70,"../GameManager":36,"../helper/FuritHelper":47}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FuiBaseView_1 = require("../../core/FuiBaseView");
const ViewManager_1 = require("../../core/ViewManager");
const UI_Book_1 = require("../../fui/GGJGame/UI_Book");
class BookView extends FuiBaseView_1.default {
    constructor() {
        super();
        this.view = UI_Book_1.default.createInstance();
        this.view.width = Laya.stage.width;
        this.view.height = Laya.stage.height;
        this.view.m_bg.onClick(this, this.nullOn);
    }
    onLoad() {
        this.view.m_btn1.onClick(this, this.onBtn1);
        this.view.m_btn2.onClick(this, this.onBtn2);
    }
    onBtn1() {
        this.callBack1 && this.callBack1.run();
        this.onClose();
    }
    onBtn2() {
        this.callBack2 && this.callBack2.run();
        this.onClose();
    }
    setData(content, title1, title2, callBack1, callBack2) {
        this.callBack1 = callBack1;
        this.callBack2 = callBack2;
        this.view.m_book.text = content;
        this.view.m_btn1.title = title1;
        this.view.m_btn2.title = title2;
    }
    nullClick() {
        this.view.m_btn1.visible = false;
        this.view.m_btn2.visible = false;
    }
    nullOn() {
    }
    onClose() {
        ViewManager_1.default.removeView(this);
        if (this.view) {
            this.view.dispose();
            this.view = null;
            this.callBack1 && this.callBack1.clear();
            this.callBack1 = null;
            this.callBack2 && this.callBack2.clear();
            this.callBack2 = null;
        }
    }
    onDestory() {
        Laya.Tween.clearAll(this);
        super.onDestory();
    }
}
exports.default = BookView;

},{"../../core/FuiBaseView":11,"../../core/ViewManager":16,"../../fui/GGJGame/UI_Book":30}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GGJGameViewCmd = void 0;
const EventManager_1 = require("../../core/EventManager");
const FuiBaseView_1 = require("../../core/FuiBaseView");
const LogicScheduler_1 = require("../../core/LogicScheduler");
const ViewManager_1 = require("../../core/ViewManager");
const UI_GGJGame_1 = require("../../fui/GGJGame/UI_GGJGame");
const GameManager_1 = require("../GameManager");
const GGJPlayScene3D_1 = require("../scene/GGJPlayScene3D");
const BagView_1 = require("./BagView");
const BookView_1 = require("./BookView");
const JoyStrickCtrl_1 = require("./JoyStrickCtrl");
var GGJGameViewCmd;
(function (GGJGameViewCmd) {
    GGJGameViewCmd["GAMEOVER"] = "GAMEOVER";
    GGJGameViewCmd["ADDFURIT"] = "ADDFURIT";
})(GGJGameViewCmd = exports.GGJGameViewCmd || (exports.GGJGameViewCmd = {}));
class GGJGameView extends FuiBaseView_1.default {
    constructor() {
        super();
        this.grassEgg = 10;
        this.view = UI_GGJGame_1.default.createInstance();
        this.view.width = Laya.stage.width;
        this.view.height = Laya.stage.height;
        // 摇杆
        ViewManager_1.default.addView(JoyStrickCtrl_1.default, new Laya.Vector2(Laya.stage.width / 2, Laya.stage.height - 150));
    }
    onLoad() {
        GGJPlayScene3D_1.default.I.init();
        GameManager_1.default.I.setGGJGameView(this);
        this.startGame();
        // 草彩蛋
        this.view.m_grass1.onClick(this, this.onClickGrass1);
        this.view.m_book.onClick(this, this.onClickBook);
        this.view.m_bag.onClick(this, this.onClickBag);
        EventManager_1.default.on(GGJGameViewCmd.GAMEOVER, this, this.gameOver);
        EventManager_1.default.on(GGJGameViewCmd.ADDFURIT, this, this.addFurit);
    }
    gameOver(isSucceed) {
        LogicScheduler_1.default.Ins.pause();
        let book = ViewManager_1.default.addView(BookView_1.default);
        let random = Math.floor(Math.random() * 100);
        if (isSucceed) {
            book.setData(`到达彼岸，游戏胜利！你找到的水果超过了${random}%的人`, "好的", "好的", Laya.Handler.create(this, this.reStart), Laya.Handler.create(this, this.reStart));
        }
        else {
            book.setData("你失败了，没有到达彼岸！", "好的", "好的", Laya.Handler.create(this, this.reStart), Laya.Handler.create(this, this.reStart));
        }
        book.nullClick();
    }
    onHpMpChange() {
        GameManager_1.default.I.hp -= 1;
        GameManager_1.default.I.mp -= 1;
        this.updateHpMp();
        if (GameManager_1.default.I.hp <= 0) {
            this.gameOver(false);
            Laya.timer.clear(this, this.onHpMpChange);
        }
    }
    reStart() {
        LogicScheduler_1.default.Ins.resume();
        GGJPlayScene3D_1.default.I.reStart();
    }
    onClickBook() {
        ViewManager_1.default.addView(BookView_1.default);
    }
    onClickBag() {
        // ViewManager.addView(BagView);
        this.onOpenBag();
    }
    addFurit(type) {
        this.onOpenBag();
        // LogicScheduler.Ins.pause();
        this.bagView.addFurit(type);
    }
    onOpenBag() {
        if (this.bagView) {
            this.bagView.show();
        }
        else {
            this.bagView = ViewManager_1.default.addView(BagView_1.default);
        }
    }
    startGame() {
        GameManager_1.default.I.hp = 500;
        GameManager_1.default.I.hpMax = 500;
        GameManager_1.default.I.mp = 800;
        GameManager_1.default.I.mpMax = 800;
        GameManager_1.default.I.curFuritCount = 0;
        GameManager_1.default.I.curRubbishCount = 0;
        this.updateHpMp();
        // 体力倒计时
        Laya.timer.loop(100, this, this.onHpMpChange);
    }
    updateHpMp() {
        this.view.m_hpText.text = GameManager_1.default.I.hp + "/" + GameManager_1.default.I.hpMax;
        this.view.m_hpBar.value = GameManager_1.default.I.hp / GameManager_1.default.I.hpMax * 100;
        this.view.m_mpText.text = GameManager_1.default.I.mp + "/" + GameManager_1.default.I.mpMax;
        this.view.m_mpBar.value = GameManager_1.default.I.mp / GameManager_1.default.I.mpMax * 100;
    }
    onClickGrass1() {
        if (this.grassEgg <= 0) {
            return;
        }
        this.view.m_grass1.displayObject.scale(0.9, 0.9);
        Laya.Tween.to(this.view.m_grass1.displayObject, {
            scaleX: 1,
            scaleY: 1,
            ease: Laya.Ease.backOut
        }, 300);
        this.grassEgg--;
        if (this.grassEgg == 0) {
            console.log("onClickGrass1");
            GGJPlayScene3D_1.default.I.boat.onSpeedUp(10, 15000);
        }
    }
    onDestory() {
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        super.onDestory();
    }
}
exports.default = GGJGameView;

},{"../../core/EventManager":10,"../../core/FuiBaseView":11,"../../core/LogicScheduler":13,"../../core/ViewManager":16,"../../fui/GGJGame/UI_GGJGame":31,"../GameManager":36,"../scene/GGJPlayScene3D":60,"./BagView":65,"./BookView":66,"./JoyStrickCtrl":68}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dir = exports.JoyCmd = void 0;
const EventManager_1 = require("../../core/EventManager");
const UI_JoyStick_1 = require("../../fui/GGJGame/UI_JoyStick");
const FuiBaseView_1 = require("../../core/FuiBaseView");
var TouchType;
(function (TouchType) {
    TouchType[TouchType["DEFAULT"] = 0] = "DEFAULT";
    TouchType[TouchType["FOLLOW"] = 1] = "FOLLOW";
})(TouchType || (TouchType = {}));
var DirectionType;
(function (DirectionType) {
    DirectionType[DirectionType["FOUR"] = 0] = "FOUR";
    DirectionType[DirectionType["EIGHT"] = 1] = "EIGHT";
    DirectionType[DirectionType["ALL"] = 2] = "ALL";
})(DirectionType || (DirectionType = {}));
var JoyCmd;
(function (JoyCmd) {
    JoyCmd["STOP"] = "STOP";
    JoyCmd["MOVE"] = "MOVE";
})(JoyCmd = exports.JoyCmd || (exports.JoyCmd = {}));
var Dir;
(function (Dir) {
    Dir[Dir["Center"] = null] = "Center";
    Dir[Dir["Up"] = 90] = "Up";
    Dir[Dir["Down"] = 270] = "Down";
    Dir[Dir["Left"] = 180] = "Left";
    Dir[Dir["Right"] = 0] = "Right";
    Dir[Dir["LeftUp"] = 135] = "LeftUp";
    Dir[Dir["LeftDown"] = 225] = "LeftDown";
    Dir[Dir["RightUp"] = 45] = "RightUp";
    Dir[Dir["RightDown"] = 315] = "RightDown"; // 右下 
})(Dir = exports.Dir || (exports.Dir = {}));
class JoyStrickCtrl extends FuiBaseView_1.default {
    constructor() {
        super();
        // 中心点偏移
        this.origin = 0;
        // 摇杆半径
        this.radius = 45;
        // 操作类型
        this.touchType = TouchType.DEFAULT;
        // 方向类型 
        this.directionType = DirectionType.ALL;
        // 透明度
        this.defaultOpacity = 0.3;
        //当前角度
        this.curAngle = 0;
        //当前摇杆偏移量
        this.curDeviation = 0;
        //当前距离
        this.distance = 0;
        // 触发事件标志
        this.isTrigger = false;
        // 角度阈值(敏感度)
        this.thresholdAngle = 1;
        this._touchId = -1;
        this.view = UI_JoyStick_1.default.createInstance();
        this.view.scaleX = 2;
        this.view.scaleY = 2;
        // this.view.displayObject.zOrder = ViewOrder.Middle;
    }
    onLoad(pos) {
        this.view.x = pos.x;
        this.view.y = pos.y;
        this.view.alpha = this.defaultOpacity;
        this.initPos = new Laya.Vector2(this.view.x, this.view.y);
        this.origin = this.view.m_bg.width * this.view.m_bg.scaleX / 2;
        if (this.radius === 0) {
            this.radius = this.origin;
        }
        this.registerTouch();
    }
    registerTouch() {
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchStart);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMove);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd);
        Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchCancel);
    }
    onTouchStart(event) {
        if (this._touchId != -1) {
            return;
        }
        this._touchId = event.touchId;
        //如果触摸类型为FOLLOW，则摇控杆的位置为触摸位置,触摸开始时候现形
        if (this.touchType == TouchType.FOLLOW) {
            this.view.setXY(event.stageX, event.stageY);
            this.isTrigger = true;
            return;
        }
        else {
            // 把触摸点坐标转换为相对与目标的模型坐标
            const touchPos = this.view.globalToLocal(event.stageX, event.stageY);
            //点与圆心的距离
            const distance = Math.sqrt(touchPos.x * touchPos.x + touchPos.y * touchPos.y);
            //如果点与圆心距离小于圆的半径,且大于操作阈值,触控成功
            if (distance < this.origin) {
                this.view.alpha = this.defaultOpacity + 0.1;
                this.setStickBarPos(touchPos.x, touchPos.y);
                this.updateAngle(touchPos.x, touchPos.y);
                this.isTrigger = true;
                return;
            }
        }
        this.isTrigger = false;
    }
    onTouchMove(event) {
        if (this._touchId == -1 || event.touchId != this._touchId) {
            return;
        }
        if (!this.isTrigger) {
            return;
        }
        const touchPos = this.view.globalToLocal(event.stageX, event.stageY);
        const distance = Math.sqrt(touchPos.x * touchPos.x + touchPos.y * touchPos.y);
        if (this.radius >= distance) {
            //如果点与圆心距离小于圆的半径,控杆跟随触摸点
            this.setStickBarPos(touchPos.x, touchPos.y);
        }
        else {
            let angle = this.calcuRadian(touchPos.x, touchPos.y);
            let x = Math.cos(angle) * this.radius;
            let y = Math.sin(angle) * this.radius;
            if (touchPos.y < 0) {
                // 在三四象限的时候,y要调整
                y *= -1;
            }
            this.setStickBarPos(x, y);
        }
        this.view.alpha = this.defaultOpacity + 0.1;
        // 更新角度
        this.updateAngle(touchPos.x, touchPos.y);
    }
    onTouchEnd(event) {
        if (this._touchId == -1 || event.touchId != this._touchId) {
            return;
        }
        this._touchId = -1;
        if (!this.isTrigger) {
            return;
        }
        this.isTrigger = false;
        this.resetStick();
    }
    onTouchCancel(event) {
        if (this._touchId == -1 || event.touchId != this._touchId) {
            return;
        }
        this._touchId = -1;
        if (!this.isTrigger) {
            return;
        }
        this.isTrigger = false;
        this.resetStick();
    }
    // 更新方向
    updateAngle(x, y) {
        this.curAngle = this.calcuRadian(x, y) * 180 / Math.PI;
        this.curDeviation = Math.sqrt(x * x + y * y);
        if (x > 0 && y < 0 || x < 0 && y < 0) {
            this.curAngle = 360 - this.curAngle;
        }
        else if (x < 0 && y == 0) {
            this.curAngle = 180;
        }
        else if (x > 0 && y == 0) {
            this.curAngle = 0;
        }
        else if (x == 0 && y > 0) {
            this.curAngle = 90;
        }
        else if (x == 0 && y < 0) {
            this.curAngle = 270;
        }
        this.formatAngle();
    }
    formatAngle() {
        switch (this.directionType) {
            case DirectionType.FOUR:
                this.curAngle = this.fourDirections();
                break;
            case DirectionType.EIGHT:
                this.curAngle = this.eightDirections();
                break;
            case DirectionType.ALL:
                this.curAngle = this.curAngle;
                break;
            default:
                this.curAngle = null;
                break;
        }
        this.emitAngle();
    }
    // 格式化方向(四方向)
    fourDirections() {
        if (this.curAngle >= 45 && this.curAngle <= 135) {
            return Dir.Up;
        }
        else if (this.curAngle >= 225 && this.curAngle <= 315) {
            return Dir.Down;
        }
        else if (this.curAngle <= 225 && this.curAngle >= 180 || this.curAngle >= 135 && this.curAngle <= 180) {
            return Dir.Left;
        }
        else if (this.curAngle <= 360 && this.curAngle >= 315 || this.curAngle >= 0 && this.curAngle <= 45) {
            return Dir.Right;
        }
    }
    // 格式化方向(八方向)
    eightDirections() {
        if (this.curAngle >= 67.5 && this.curAngle <= 112.5) {
            return Dir.Up;
        }
        else if (this.curAngle >= 247.5 && this.curAngle <= 292.5) {
            return Dir.Down;
        }
        else if (this.curAngle <= 202.5 && this.curAngle >= 180 || this.curAngle >= 157.5 && this.curAngle <= 180) {
            return Dir.Left;
        }
        else if (this.curAngle <= 360 && this.curAngle >= 337.5 || this.curAngle >= 0 && this.curAngle <= 22.5) {
            return Dir.Right;
        }
        else if (this.curAngle >= 112.5 && this.curAngle <= 157.5) {
            return Dir.LeftUp;
        }
        else if (this.curAngle >= 22.5 && this.curAngle <= 67.5) {
            return Dir.RightUp;
        }
        else if (this.curAngle >= 202.5 && this.curAngle <= 247.5) {
            return Dir.LeftDown;
        }
        else if (this.curAngle >= 292.5 && this.curAngle <= 337.5) {
            return Dir.RightDown;
        }
    }
    // 计算弧度
    calcuRadian(x, y) {
        const z = x * x + y * y;
        if (z === 0) {
            return 0;
        }
        else {
            return Math.acos(x / Math.sqrt(z));
        }
    }
    resetStick() {
        this.view.alpha = this.defaultOpacity;
        //如果触摸类型为FOLLOW，离开触摸后隐藏
        if (this.touchType == TouchType.FOLLOW) {
            this.view.setXY(this.initPos.x, this.initPos.y);
        }
        this.setStickBarPos(0, 0);
        this.curAngle = null;
        this.curDeviation = 0;
        this.emitAngle();
    }
    setStickBarPos(x, y) {
        this.view.m_stickBar.setXY(x + this.origin, y + this.origin);
    }
    // 推送更新方向通知
    emitAngle() {
        if (this.curAngle == null) {
            // 取消操作通知
            EventManager_1.default.emit(JoyCmd.STOP);
        }
        else {
            if ((this.preAngle == null) || Math.abs(this.preAngle - this.curAngle) > this.thresholdAngle) {
                // 大于敏感值时发送,移动通知
                EventManager_1.default.emit(JoyCmd.MOVE, this.curAngle, this.curDeviation);
            }
        }
        this.preAngle = this.curAngle;
    }
    onDestory() {
        super.onDestory();
    }
}
exports.default = JoyStrickCtrl;

},{"../../core/EventManager":10,"../../core/FuiBaseView":11,"../../fui/GGJGame/UI_JoyStick":32}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FuiBaseView_1 = require("../../core/FuiBaseView");
const UI_Loading_1 = require("../../fui/Common/UI_Loading");
class LoadingView extends FuiBaseView_1.default {
    constructor() {
        super();
        this.view = UI_Loading_1.default.createInstance();
    }
    onLoad() {
        this.view.width = Laya.stage.width;
        this.view.height = Laya.stage.height;
        this.view.m_progressBar.max = 1;
    }
    setProgress(value) {
        this.view.m_progressBar.value = value;
    }
}
exports.default = LoadingView;

},{"../../core/FuiBaseView":11,"../../fui/Common/UI_Loading":27}],70:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ui = void 0;
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var common;
    (function (common) {
        class GameUI extends Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("common/Game");
            }
        }
        common.GameUI = GameUI;
        REG("ui.common.GameUI", GameUI);
        class LoadingUI extends Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("common/Loading");
            }
        }
        common.LoadingUI = LoadingUI;
        REG("ui.common.LoadingUI", LoadingUI);
    })(common = ui.common || (ui.common = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var ggjfurit;
        (function (ggjfurit) {
            class BagUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("common/ggjfurit/Bag");
                }
            }
            ggjfurit.BagUI = BagUI;
            REG("ui.common.ggjfurit.BagUI", BagUI);
        })(ggjfurit = common.ggjfurit || (common.ggjfurit = {}));
    })(common = ui.common || (ui.common = {}));
})(ui = exports.ui || (exports.ui = {}));

},{}]},{},[2])

//# sourceMappingURL=bundle.js.map
